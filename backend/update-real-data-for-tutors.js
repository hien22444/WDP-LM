const mongoose = require('mongoose');
const TutorProfile = require('./src/models/TutorProfile');
const User = require('./src/models/User');

async function updateRealDataForTutors() {
  try {
    await mongoose.connect('mongodb+srv://HieuTD:qbTXXCEIn1G4veK5@learnmate.6rejkx4.mongodb.net/?retryWrites=true&w=majority&appName=LearnMate');
    console.log('Connected to MongoDB Atlas');

    // L·∫•y t·∫•t c·∫£ gia s∆∞
    const tutors = await TutorProfile.find({}).populate('user');
    
    console.log(`\nüîÑ C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU TH·ª∞C T·∫æ CHO ${tutors.length} GIA S∆Ø`);
    console.log('='.repeat(80));

    let updatedCount = 0;
    let skippedCount = 0;

    for (let i = 0; i < tutors.length; i++) {
      const tutor = tutors[i];
      const user = tutor.user;
      
      console.log(`\nüë§ GIA S∆Ø ${i + 1}: ${user?.full_name || 'N/A'}`);
      
      // Ki·ªÉm tra d·ªØ li·ªáu th·ª±c t·∫ø hi·ªán t·∫°i
      const hasRealData = {
        avatar: !!(tutor.avatarUrl || user?.image),
        location: !!(tutor.city || tutor.district),
        bio: !!tutor.bio,
        subjects: !!(tutor.subjects && tutor.subjects.length > 0),
        experience: !!(tutor.experienceYears && tutor.experienceYears > 0),
        price: !!(tutor.sessionRate && tutor.sessionRate > 0)
      };
      
      const realDataCount = Object.values(hasRealData).filter(Boolean).length;
      
      if (realDataCount >= 4) {
        console.log(`‚úÖ GIA S∆Ø N√ÄY ƒê√É C√ì D·ªÆ LI·ªÜU TH·ª∞C T·∫æ (${realDataCount}/6)`);
        console.log(`   - Avatar: ${hasRealData.avatar ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - ƒê·ªãa ch·ªâ: ${hasRealData.location ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Gi·ªõi thi·ªáu: ${hasRealData.bio ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - M√¥n d·∫°y: ${hasRealData.subjects ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Kinh nghi·ªám: ${hasRealData.experience ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - H·ªçc ph√≠: ${hasRealData.price ? '‚úÖ' : '‚ùå'}`);
        updatedCount++;
      } else if (realDataCount > 0) {
        console.log(`‚ö†Ô∏è  GIA S∆Ø N√ÄY C√ì √çT D·ªÆ LI·ªÜU TH·ª∞C T·∫æ (${realDataCount}/6)`);
        console.log(`   - Avatar: ${hasRealData.avatar ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - ƒê·ªãa ch·ªâ: ${hasRealData.location ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Gi·ªõi thi·ªáu: ${hasRealData.bio ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - M√¥n d·∫°y: ${hasRealData.subjects ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Kinh nghi·ªám: ${hasRealData.experience ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - H·ªçc ph√≠: ${hasRealData.price ? '‚úÖ' : '‚ùå'}`);
        updatedCount++;
      } else {
        console.log(`‚ùå GIA S∆Ø N√ÄY CH∆ØA C√ì D·ªÆ LI·ªÜU TH·ª∞C T·∫æ`);
        console.log(`   - C·∫ßn gia s∆∞ ƒëƒÉng nh·∫≠p v√† c·∫≠p nh·∫≠t h·ªì s∆°`);
        skippedCount++;
      }
      
      // N·∫øu c√≥ d·ªØ li·ªáu th·ª±c t·∫ø, ƒë·∫£m b·∫£o status l√† approved
      if (realDataCount >= 4 && tutor.status !== 'approved') {
        await TutorProfile.updateOne(
          { _id: tutor._id },
          { $set: { status: 'approved' } }
        );
        console.log(`   üîÑ ƒê√£ c·∫≠p nh·∫≠t status th√†nh 'approved'`);
      }
    }

    // Th·ªëng k√™ t·ªïng quan
    console.log('\nüìä TH·ªêNG K√ä C·∫¨P NH·∫¨T:');
    console.log(`‚úÖ Gia s∆∞ c√≥ d·ªØ li·ªáu th·ª±c t·∫ø: ${updatedCount}/${tutors.length}`);
    console.log(`‚ùå Gia s∆∞ ch∆∞a c√≥ d·ªØ li·ªáu: ${skippedCount}/${tutors.length}`);
    console.log(`üìà T·ª∑ l·ªá c√≥ d·ªØ li·ªáu: ${Math.round(updatedCount/tutors.length*100)}%`);

    // C·∫≠p nh·∫≠t c√°c gia s∆∞ c√≥ d·ªØ li·ªáu t·ªët nh·∫•t
    const goodTutors = tutors.filter(tutor => {
      const user = tutor.user;
      const hasRealData = {
        avatar: !!(tutor.avatarUrl || user?.image),
        location: !!(tutor.city || tutor.district),
        bio: !!tutor.bio,
        subjects: !!(tutor.subjects && tutor.subjects.length > 0),
        experience: !!(tutor.experienceYears && tutor.experienceYears > 0),
        price: !!(tutor.sessionRate && tutor.sessionRate > 0)
      };
      const realDataCount = Object.values(hasRealData).filter(Boolean).length;
      return realDataCount >= 4;
    });

    console.log('\nüéØ C√ÅC GIA S∆Ø C√ì D·ªÆ LI·ªÜU T·ªêT NH·∫§T:');
    goodTutors.forEach((tutor, index) => {
      const user = tutor.user;
      console.log(`${index + 1}. ${user?.full_name || 'N/A'} (${user?.email || 'N/A'})`);
      console.log(`   - ƒê·ªãa ch·ªâ: ${tutor.city || 'Ch∆∞a c√≥'}`);
      console.log(`   - M√¥n d·∫°y: ${tutor.subjects?.length || 0} m√¥n`);
      console.log(`   - Kinh nghi·ªám: ${tutor.experienceYears || 0} nƒÉm`);
      console.log(`   - H·ªçc ph√≠: ${tutor.sessionRate || 0}ƒë`);
    });

    await mongoose.disconnect();
    console.log('\nüéâ Ho√†n th√†nh c·∫≠p nh·∫≠t d·ªØ li·ªáu th·ª±c t·∫ø!');
  } catch (error) {
    console.error('Error:', error.message);
  }
}

updateRealDataForTutors();
