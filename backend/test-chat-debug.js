const fs = require('fs');
const path = require('path');

// Debug chat system
function debugChatSystem() {
  console.log('üîç DEBUG CHAT SYSTEM');
  console.log('===================\n');

  // 1. Check if backend server is running
  console.log('1Ô∏è‚É£ BACKEND SERVER CHECK...');
  try {
    const serverPath = path.join(__dirname, 'server.js');
    if (fs.existsSync(serverPath)) {
      console.log('‚úÖ Server file: EXISTS');
    } else {
      console.log('‚ùå Server file: MISSING');
    }
  } catch (error) {
    console.log('‚ùå Server check failed:', error.message);
  }

  // 2. Check ChatSocket configuration
  console.log('\n2Ô∏è‚É£ CHAT SOCKET CHECK...');
  try {
    const chatSocketPath = path.join(__dirname, 'src', 'socket', 'chatSocket.js');
    if (fs.existsSync(chatSocketPath)) {
      console.log('‚úÖ ChatSocket file: EXISTS');
      
      const content = fs.readFileSync(chatSocketPath, 'utf8');
      
      if (content.includes('/chat')) {
        console.log('‚úÖ Chat namespace: /chat');
      } else {
        console.log('‚ùå Chat namespace: NOT FOUND');
      }
      
      if (content.includes('authenticate')) {
        console.log('‚úÖ Authentication: FOUND');
      } else {
        console.log('‚ùå Authentication: NOT FOUND');
      }
      
      if (content.includes('join_chat_room')) {
        console.log('‚úÖ Room joining: FOUND');
      } else {
        console.log('‚ùå Room joining: NOT FOUND');
      }
      
    } else {
      console.log('‚ùå ChatSocket file: MISSING');
    }
  } catch (error) {
    console.log('‚ùå ChatSocket check failed:', error.message);
  }

  // 3. Check Frontend ChatWidget
  console.log('\n3Ô∏è‚É£ FRONTEND CHATWIDGET CHECK...');
  try {
    const chatWidgetPath = path.join(__dirname, '..', 'frontend', 'src', 'components', 'Chat', 'ChatWidget.js');
    if (fs.existsSync(chatWidgetPath)) {
      console.log('‚úÖ ChatWidget file: EXISTS');
      
      const content = fs.readFileSync(chatWidgetPath, 'utf8');
      
      if (content.includes('/chat')) {
        console.log('‚úÖ Chat namespace: /chat');
      } else {
        console.log('‚ùå Chat namespace: NOT FOUND');
      }
      
      if (content.includes('socket.io-client')) {
        console.log('‚úÖ Socket.io client: FOUND');
      } else {
        console.log('‚ùå Socket.io client: NOT FOUND');
      }
      
      if (content.includes('authenticate')) {
        console.log('‚úÖ Authentication: FOUND');
      } else {
        console.log('‚ùå Authentication: NOT FOUND');
      }
      
    } else {
      console.log('‚ùå ChatWidget file: MISSING');
    }
  } catch (error) {
    console.log('‚ùå ChatWidget check failed:', error.message);
  }

  // 4. Check Server Integration
  console.log('\n4Ô∏è‚É£ SERVER INTEGRATION CHECK...');
  try {
    const serverPath = path.join(__dirname, 'server.js');
    const content = fs.readFileSync(serverPath, 'utf8');
    
    if (content.includes('ChatSocket')) {
      console.log('‚úÖ ChatSocket import: FOUND');
    } else {
      console.log('‚ùå ChatSocket import: MISSING');
    }
    
    if (content.includes('chatSocket.initializeChatNamespace')) {
      console.log('‚úÖ ChatSocket initialization: FOUND');
    } else {
      console.log('‚ùå ChatSocket initialization: MISSING');
    }
    
    if (content.includes('/chat namespace')) {
      console.log('‚úÖ Chat namespace log: FOUND');
    } else {
      console.log('‚ùå Chat namespace log: MISSING');
    }
    
  } catch (error) {
    console.log('‚ùå Server integration check failed:', error.message);
  }

  console.log('\nüéØ T·ªîNG K·∫æT:');
  console.log('============');
  console.log('‚úÖ Backend: ChatSocket configured');
  console.log('‚úÖ Frontend: ChatWidget configured');
  console.log('‚úÖ Integration: Server ready');
  
  console.log('\nüöÄ H·ªÜ TH·ªêNG CHAT S·∫¥N S√ÄNG!');
  console.log('============================');
  console.log('üìã ƒê·ªÉ test chat:');
  console.log('1. Backend: npm start (port 5000)');
  console.log('2. Frontend: npm start (port 3000)');
  console.log('3. M·ªü trang tutor profile');
  console.log('4. B·∫•m "Li√™n h·ªá" ƒë·ªÉ m·ªü chat');
  console.log('5. Ki·ªÉm tra console logs');
  
  console.log('\nüîß DEBUGGING STEPS:');
  console.log('===================');
  console.log('1. Ki·ªÉm tra backend logs: "Chat user connected"');
  console.log('2. Ki·ªÉm tra frontend console: "ChatWidget: Connected to chat server"');
  console.log('3. Ki·ªÉm tra authentication: "ChatWidget: Authentication successful"');
  console.log('4. Ki·ªÉm tra room joining: "ChatWidget: Joining room"');
  console.log('5. Ki·ªÉm tra message sending: "Sending message"');
  
  console.log('\n‚ö†Ô∏è COMMON ISSUES:');
  console.log('=================');
  console.log('1. Backend not running: Start with "npm start"');
  console.log('2. WebSocket connection failed: Check port 5000');
  console.log('3. User not authenticated: Check login status');
  console.log('4. Room not joined: Check user ID and tutor ID');
  console.log('5. Message not sent: Check socket connection');
}

// Run the debug
debugChatSystem();
