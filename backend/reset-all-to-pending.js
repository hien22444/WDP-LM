/**
 * Script: Reset All Tutors to Pending
 * M·ª•c ƒë√≠ch: Reset T·∫§T C·∫¢ v·ªÅ tr·∫°ng th√°i ch·ªù duy·ªát (ƒë·ªÉ test l·∫°i t·ª´ ƒë·∫ßu)
 * 
 * C·∫¢NH B√ÅO: Script n√†y s·∫Ω:
 * - ƒê·∫∑t T·∫§T C·∫¢ user.role v·ªÅ "learner"
 * - ƒê·∫∑t T·∫§T C·∫¢ tutor_profile.status v·ªÅ "pending"
 * - Ch·ªâ d√πng cho m√¥i tr∆∞·ªùng DEV/TEST
 */

require('dotenv').config();
const mongoose = require('mongoose');
const readline = require('readline');
const User = require('./src/models/User');
const TutorProfile = require('./src/models/TutorProfile');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function resetAllToPending() {
  try {
    console.log('\n‚ö†Ô∏è  C·∫¢NH B√ÅO: Script n√†y s·∫Ω reset T·∫§T C·∫¢ d·ªØ li·ªáu v·ªÅ tr·∫°ng th√°i ch·ªù duy·ªát!\n');
    console.log('Thay ƒë·ªïi:');
    console.log('  - T·∫§T C·∫¢ users c√≥ TutorProfile ‚Üí role = "learner"');
    console.log('  - T·∫§T C·∫¢ tutor_profiles ‚Üí status = "pending"\n');

    const answer = await askQuestion('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): ');
    
    if (answer.toLowerCase() !== 'yes') {
      console.log('‚ùå ƒê√£ h·ªßy.');
      rl.close();
      return;
    }

    // K·∫øt n·ªëi MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/edumatch';
    await mongoose.connect(mongoUri);
    console.log('\n‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB:', mongoUri);
    console.log('---\n');

    // 1. Reset t·∫•t c·∫£ TutorProfile v·ªÅ pending
    console.log('üîÑ ƒêang reset t·∫•t c·∫£ TutorProfile v·ªÅ pending...');
    const tutorProfiles = await TutorProfile.find({}).lean();
    
    let updatedProfiles = 0;
    for (const profile of tutorProfiles) {
      await TutorProfile.findByIdAndUpdate(profile._id, {
        status: 'pending'
      });
      updatedProfiles++;
    }
    console.log(`‚úÖ ƒê√£ reset ${updatedProfiles} tutor profiles\n`);

    // 2. Reset t·∫•t c·∫£ user c√≥ TutorProfile v·ªÅ role="learner"
    console.log('üîÑ ƒêang reset user roles v·ªÅ learner...');
    const userIds = tutorProfiles.map(p => p.user);
    
    const result = await User.updateMany(
      { 
        _id: { $in: userIds },
        role: { $ne: 'admin' }  // Kh√¥ng ƒë·ªïi admin
      },
      {
        $set: { role: 'learner' }
      }
    );
    console.log(`‚úÖ ƒê√£ reset ${result.modifiedCount} users v·ªÅ learner\n`);

    // Hi·ªÉn th·ªã th·ªëng k√™
    console.log('üìä TH·ªêNG K√ä SAU KHI RESET:');
    
    const learnerCount = await User.countDocuments({ role: 'learner' });
    const tutorCount = await User.countDocuments({ role: 'tutor' });
    const adminCount = await User.countDocuments({ role: 'admin' });
    
    console.log(`   üë§ Learners: ${learnerCount}`);
    console.log(`   üéì Tutors: ${tutorCount}`);
    console.log(`   üë®‚Äçüíº Admins: ${adminCount}\n`);

    const pendingCount = await TutorProfile.countDocuments({ status: 'pending' });
    const approvedCount = await TutorProfile.countDocuments({ status: 'approved' });
    const rejectedCount = await TutorProfile.countDocuments({ status: 'rejected' });
    
    console.log(`   ‚è≥ Pending: ${pendingCount}`);
    console.log(`   ‚úÖ Approved: ${approvedCount}`);
    console.log(`   ‚ùå Rejected: ${rejectedCount}\n`);

    // Hi·ªÉn th·ªã danh s√°ch ƒë∆°n ch·ªù duy·ªát
    console.log('üë• DANH S√ÅCH ƒê∆†N CH·ªú DUY·ªÜT:');
    const profiles = await TutorProfile.find({ status: 'pending' })
      .populate('user', 'full_name email role')
      .limit(20)
      .lean();
    
    profiles.forEach((p, index) => {
      if (p.user) {
        console.log(`   ${index + 1}. ${p.user.full_name} (${p.user.email}) - Role: ${p.user.role}`);
      }
    });

    console.log('\n‚úÖ Reset ho√†n t·∫•t!\n');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
    rl.close();
  }
}

// Ch·∫°y script
resetAllToPending();


