const payOS = require("../config/payos");

// T·∫°o link thanh to√°n
const createPaymentLink = async (req, res) => {
  // FIX: orderCode ph·∫£i l√† m·ªôt S·ªê NGUY√äN D∆Ø∆†NG h·ª£p l·ªá theo PayOS.
  // PayOS y√™u c·∫ßu order_code l√† integer, positive v√† <= Number.MAX_SAFE_INTEGER.
  // Sinh orderCode an to√†n: seconds-since-epoch (smaller than ms) + 3-digit random suffix.
  const seconds = Math.floor(Date.now() / 1000);
  const suffix = Math.floor(Math.random() * 900) + 100; // 100..999
  let orderCode = Number(String(seconds) + String(suffix));
  // Safety checks
  if (
    !Number.isFinite(orderCode) ||
    !Number.isInteger(orderCode) ||
    orderCode <= 0
  ) {
    orderCode = seconds; // fallback
  }
  if (orderCode > Number.MAX_SAFE_INTEGER) {
    orderCode = seconds; // ensure below safe integer
  }

  const order = {
    orderCode: orderCode, // M√£ ƒë∆°n h√†ng duy nh·∫•t, l√† s·ªë nguy√™n
    amount: 2000,
    description: "Thanh to√°n ƒë∆°n h√†ng WDP-LM",
    returnUrl: `${process.env.FRONTEND_URL}/payment-success`,
    cancelUrl: `${process.env.FRONTEND_URL}/payment-cancel`,
    // partnerReference: `WDP-${orderCode}`, // Kh√¥ng b·∫Øt bu·ªôc, c√≥ th·ªÉ th√™m n·∫øu c·∫ßn
  };

  try {
    if (!payOS || typeof payOS.paymentRequests.create !== "function") {
      throw new Error("PayOS SDK ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch.");
    }

    console.log("Creating payment link with order:", order);
    const paymentLink = await payOS.paymentRequests.create(order);

    const payload = {
      success: true,
      checkoutUrl: paymentLink.checkoutUrl,
      qrUrl: paymentLink.qrUrl || null,
      qrBase64: paymentLink.qrBase64 || null,
    };

    console.log(
      "‚úÖ Payment link created successfully for orderCode:",
      orderCode
    );
    return res.json(payload);
  } catch (error) {
    // IMPROVEMENT: Log to√†n b·ªô l·ªói ƒë·ªÉ c√≥ nhi·ªÅu th√¥ng tin debug h∆°n
    console.error("‚ùå L·ªói t·∫°o link thanh to√°n:", error);

    // Tr·∫£ v·ªÅ c·∫•u tr√∫c l·ªói chu·∫©n cho client
    return res.status(500).json({
      success: false,
      message: error.message || "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën.",
      // C√≥ th·ªÉ th√™m error.code n·∫øu API tr·∫£ v·ªÅ
      errorCode: error.code || null,
    });
  }
};

// Nh·∫≠n webhook t·ª´ PayOS
const receiveWebhook = async (req, res) => {
  try {
    const webhookData = req.body;
    console.log("üì© Webhook received:", webhookData);

    // TODO: Th√™m logic x√°c th·ª±c webhook (n·∫øu PayOS cung c·∫•p checksum)

    // TODO: X·ª¨ L√ù LOGIC KINH DOANH T·∫†I ƒê√ÇY
    // D·ª±a v√†o `webhookData`, ƒë·∫∑c bi·ªát l√† `data.orderCode` v√† `data.status`
    // 1. T√¨m ƒë∆°n h√†ng trong database c·ªßa b·∫°n v·ªõi `webhookData.data.orderCode`.
    // 2. Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n (`webhookData.data.status === 'PAID'`).
    // 3. N·∫øu ƒë√£ thanh to√°n th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng trong database.
    // 4. C√≥ th·ªÉ g·ª≠i email x√°c nh·∫≠n cho kh√°ch h√†ng.

    // V√≠ d·ª• logic:
    if (webhookData.code === "00" && webhookData.data) {
      const orderCode = webhookData.data.orderCode;
      const status = webhookData.data.status;

      if (status === "PAID") {
        console.log(`‚úÖ Order ${orderCode} has been paid successfully.`);
        // await OrderModel.updateOne({ code: orderCode }, { status: 'PAID' });
      } else {
        console.log(`‚ùï Order ${orderCode} status is: ${status}`);
        // await OrderModel.updateOne({ code: orderCode }, { status: 'CANCELLED' });
      }
    }

    // Lu√¥n tr·∫£ v·ªÅ status 200 cho PayOS ƒë·ªÉ x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆∞·ª£c webhook
    res.status(200).json({ success: true, message: "Webhook received" });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói x·ª≠ l√Ω webhook:", error);
    // Tr·∫£ v·ªÅ l·ªói ƒë·ªÉ PayOS c√≥ th·ªÉ th·ª≠ g·ª≠i l·∫°i (n·∫øu c√≥ c∆° ch·∫ø retry)
    res.status(400).json({ success: false, message: error.message });
  }
};

module.exports = {
  createPaymentLink,
  receiveWebhook,
};
