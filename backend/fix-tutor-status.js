/**
 * Script: Fix Tutor Profile Status
 * M·ª•c ƒë√≠ch: ƒê·ªìng b·ªô l·∫°i status c·ªßa tutor_profiles d·ª±a tr√™n role c·ªßa user
 * 
 * Logic:
 * - N·∫øu user.role = "learner" ‚Üí tutor_profile.status = "pending" (ch·ªù duy·ªát)
 * - N·∫øu user.role = "tutor" ‚Üí tutor_profile.status = "approved" (ƒë√£ duy·ªát)
 */

require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./src/models/User');
const TutorProfile = require('./src/models/TutorProfile');

async function fixTutorStatus() {
  try {
    console.log('üîß B·∫Øt ƒë·∫ßu fix tutor status...\n');

    // K·∫øt n·ªëi MongoDB
    const mongoUri = process.env.MONGO_URI || process.env.DB_HOST || process.env.URI_DB || 'mongodb://localhost:27017';
    await mongoose.connect(mongoUri, {
      dbName: 'test' // CRITICAL: Backend ƒëang d√πng database 'test'
    });
    const safeUri = mongoUri.replace(/(mongodb\+srv:\/\/[^:]+):[^@]+@/, '$1:****@');
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB:', safeUri);
    console.log('‚úÖ Database: test');
    console.log('---\n');

    // L·∫•y t·∫•t c·∫£ TutorProfile
    const tutorProfiles = await TutorProfile.find({}).populate('user').lean();
    console.log(`üìä T·ªïng s·ªë tutor profiles: ${tutorProfiles.length}\n`);

    let fixedCount = 0;
    let alreadyCorrectCount = 0;
    let noUserCount = 0;

    for (const profile of tutorProfiles) {
      if (!profile.user) {
        console.log(`‚ö†Ô∏è  Profile ${profile._id} kh√¥ng c√≥ user (ƒë√£ b·ªã x√≥a)`);
        noUserCount++;
        continue;
      }

      const userRole = profile.user.role;
      const currentStatus = profile.status;
      let expectedStatus;

      // X√°c ƒë·ªãnh status mong mu·ªën d·ª±a v√†o role
      if (userRole === 'learner') {
        expectedStatus = 'pending';  // Ch·ªù duy·ªát
      } else if (userRole === 'tutor') {
        expectedStatus = 'approved'; // ƒê√£ duy·ªát
      } else {
        // admin ho·∫∑c role kh√°c, gi·ªØ nguy√™n
        expectedStatus = currentStatus;
      }

      if (currentStatus !== expectedStatus) {
        // C·∫ßn fix
        console.log(`üîÑ Fixing Profile: ${profile._id}`);
        console.log(`   User: ${profile.user.full_name} (${profile.user.email})`);
        console.log(`   Role: ${userRole}`);
        console.log(`   Current Status: ${currentStatus} ‚Üí Expected: ${expectedStatus}`);
        
        await TutorProfile.findByIdAndUpdate(profile._id, {
          status: expectedStatus
        });
        
        console.log(`   ‚úÖ Updated!\n`);
        fixedCount++;
      } else {
        // ƒê√£ ƒë√∫ng r·ªìi
        alreadyCorrectCount++;
      }
    }

    console.log('\nüìä K·∫æT QU·∫¢:');
    console.log(`   ‚úÖ ƒê√£ fix: ${fixedCount} profiles`);
    console.log(`   ‚úîÔ∏è  ƒê√£ ƒë√∫ng t·ª´ tr∆∞·ªõc: ${alreadyCorrectCount} profiles`);
    console.log(`   ‚ö†Ô∏è  Kh√¥ng c√≥ user: ${noUserCount} profiles`);
    console.log(`   üìä T·ªïng: ${tutorProfiles.length} profiles\n`);

    // Hi·ªÉn th·ªã th·ªëng k√™ sau khi fix
    console.log('üìà TH·ªêNG K√ä SAU KHI FIX:');
    
    const pendingCount = await TutorProfile.countDocuments({ status: 'pending' });
    const approvedCount = await TutorProfile.countDocuments({ status: 'approved' });
    const rejectedCount = await TutorProfile.countDocuments({ status: 'rejected' });
    const draftCount = await TutorProfile.countDocuments({ status: 'draft' });
    
    console.log(`   ‚è≥ Pending (Ch·ªù duy·ªát): ${pendingCount}`);
    console.log(`   ‚úÖ Approved (ƒê√£ duy·ªát): ${approvedCount}`);
    console.log(`   ‚ùå Rejected (T·ª´ ch·ªëi): ${rejectedCount}`);
    console.log(`   üìù Draft (Nh√°p): ${draftCount}\n`);

    // Hi·ªÉn th·ªã chi ti·∫øt ng∆∞·ªùi ch·ªù duy·ªát
    console.log('üë• DANH S√ÅCH ƒê∆†N CH·ªú DUY·ªÜT (role=learner):');
    const pendingProfiles = await TutorProfile.find({ status: 'pending' })
      .populate('user', 'full_name email role')
      .lean();
    
    pendingProfiles.forEach((p, index) => {
      if (p.user) {
        console.log(`   ${index + 1}. ${p.user.full_name} (${p.user.email}) - Role: ${p.user.role}`);
      }
    });

    console.log('\n‚úÖ Ho√†n th√†nh!\n');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
fixTutorStatus();

