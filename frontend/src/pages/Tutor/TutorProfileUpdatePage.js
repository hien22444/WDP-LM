import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { toast } from 'react-toastify';
import { updateTutorProfile, updateTutorBasic } from '../../services/TutorService';
import UniversalHeader from '../../components/Layout/UniversalHeader';
import './TutorProfileUpdatePage.scss';

const TutorProfileUpdatePage = () => {
  const navigate = useNavigate();
  const isAuthenticated = useSelector((state) => state.user.isAuthenticated);
  const currentUser = useSelector((state) => state.user.user);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    introduction: '',
    subjects: [],
    experience: '',
    hourlyRate: '',
    location: '',
    education: '',
    university: '',
    teachingMethod: '',
    achievements: '',
    availability: []
  });

  const subjects = [
    'To√°n', 'L√Ω', 'H√≥a', 'Sinh', 'VƒÉn', 'Anh', 'S·ª≠', 'ƒê·ªãa',
    'Tin h·ªçc', 'L·∫≠p tr√¨nh', 'V·∫≠t l√Ω', 'H√≥a h·ªçc', 'Sinh h·ªçc',
    'Ng·ªØ vƒÉn', 'Ti·∫øng Anh', 'L·ªãch s·ª≠', 'ƒê·ªãa l√Ω'
  ];

  useEffect(() => {
    // Check authentication
    console.log('üîç TutorProfileUpdatePage: Authentication check:', {
      isAuthenticated,
      currentUser,
      localStorageUser: localStorage.getItem("user")
    });
    
    if (!isAuthenticated) {
      console.log('‚ùå TutorProfileUpdatePage: User not authenticated, redirecting to login');
      toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t h·ªì s∆°');
      navigate('/signin');
      return;
    }
    
    // Load existing tutor profile data if available
    // This could be fetched from an API
  }, [isAuthenticated, currentUser, navigate]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubjectChange = (subject) => {
    setFormData(prev => ({
      ...prev,
      subjects: prev.subjects.includes(subject)
        ? prev.subjects.filter(s => s !== subject)
        : [...prev.subjects, subject]
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      console.log('üîç TutorProfileUpdatePage: Submitting form data:', formData);
      
      // Use updateTutorProfile to update all fields
      const result = await updateTutorProfile(formData);
      
      console.log('‚úÖ TutorProfileUpdatePage: Update successful:', result);
      toast.success('C·∫≠p nh·∫≠t h·ªì s∆° gia s∆∞ th√†nh c√¥ng!');
      navigate('/profile');
    } catch (error) {
      console.error('‚ùå TutorProfileUpdatePage: Error updating tutor profile:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        statusText: error.response?.statusText
      });
      
      // Show more helpful error message
      if (error.response?.status === 401) {
        toast.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        navigate('/signin');
      } else {
        toast.error(`C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t h·ªì s∆°: ${error.response?.data?.message || error.message}`);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    navigate('/profile');
  };

  return (
    <div className="tutor-profile-update-page">
      <UniversalHeader />
      
      <div className="page-container">
        <div className="page-header">
          <h1>C·∫≠p nh·∫≠t h·ªì s∆° gia s∆∞</h1>
          <p>ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ h·ªçc vi√™n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ b·∫°n</p>
        </div>

        <div className="form-container">
          <form onSubmit={handleSubmit} className="update-form">
            {/* Gi·ªõi thi·ªáu */}
            <div className="form-section">
              <h3>Gi·ªõi thi·ªáu</h3>
              <textarea
                name="introduction"
                value={formData.introduction}
                onChange={handleInputChange}
                placeholder="H√£y gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n b·∫°n, kinh nghi·ªám gi·∫£ng d·∫°y, ph∆∞∆°ng ph√°p d·∫°y h·ªçc..."
                className="form-control"
                rows="6"
              />
            </div>

            {/* M√¥n d·∫°y */}
            <div className="form-section">
              <h3>M√¥n d·∫°y</h3>
              <div className="subjects-grid">
                {subjects.map(subject => (
                  <label key={subject} className="subject-checkbox">
                    <input
                      type="checkbox"
                      checked={formData.subjects.includes(subject)}
                      onChange={() => handleSubjectChange(subject)}
                    />
                    <span className="subject-label">{subject}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Kinh nghi·ªám */}
            <div className="form-section">
              <h3>Kinh nghi·ªám gi·∫£ng d·∫°y (nƒÉm)</h3>
              <input
                type="number"
                name="experience"
                value={formData.experience}
                onChange={handleInputChange}
                placeholder="V√≠ d·ª•: 3"
                className="form-control"
                min="0"
              />
            </div>

            {/* M·ª©c ph√≠ */}
            <div className="form-section">
              <h3>M·ª©c ph√≠/gi·ªù (VNƒê)</h3>
              <input
                type="number"
                name="hourlyRate"
                value={formData.hourlyRate}
                onChange={handleInputChange}
                placeholder="V√≠ d·ª•: 200000"
                className="form-control"
                min="0"
              />
            </div>

            {/* ƒê·ªãa ƒëi·ªÉm */}
            <div className="form-section">
              <h3>ƒê·ªãa ƒëi·ªÉm d·∫°y</h3>
              <input
                type="text"
                name="location"
                value={formData.location}
                onChange={handleInputChange}
                placeholder="V√≠ d·ª•: H√† N·ªôi, TP.HCM..."
                className="form-control"
              />
            </div>

            {/* H·ªçc v·∫•n */}
            <div className="form-section">
              <h3>H·ªçc v·∫•n</h3>
              <input
                type="text"
                name="education"
                value={formData.education}
                onChange={handleInputChange}
                placeholder="V√≠ d·ª•: C·ª≠ nh√¢n, Th·∫°c sƒ©, Ti·∫øn sƒ©..."
                className="form-control"
              />
            </div>

            {/* Tr∆∞·ªùng ƒë·∫°i h·ªçc */}
            <div className="form-section">
              <h3>Tr∆∞·ªùng ƒë·∫°i h·ªçc</h3>
              <input
                type="text"
                name="university"
                value={formData.university}
                onChange={handleInputChange}
                placeholder="V√≠ d·ª•: ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi..."
                className="form-control"
              />
            </div>

            {/* Ph∆∞∆°ng ph√°p d·∫°y */}
            <div className="form-section">
              <h3>Ph∆∞∆°ng ph√°p d·∫°y h·ªçc</h3>
              <textarea
                name="teachingMethod"
                value={formData.teachingMethod}
                onChange={handleInputChange}
                placeholder="M√¥ t·∫£ ph∆∞∆°ng ph√°p d·∫°y h·ªçc c·ªßa b·∫°n..."
                className="form-control"
                rows="4"
              />
            </div>

            {/* Th√†nh t√≠ch */}
            <div className="form-section">
              <h3>Th√†nh t√≠ch n·ªïi b·∫≠t</h3>
              <textarea
                name="achievements"
                value={formData.achievements}
                onChange={handleInputChange}
                placeholder="C√°c gi·∫£i th∆∞·ªüng, ch·ª©ng ch·ªâ, th√†nh t√≠ch ƒë·∫°t ƒë∆∞·ª£c..."
                className="form-control"
                rows="4"
              />
            </div>

            {/* L·ªãch r·∫£nh */}
            <div className="form-section">
              <h3>Th·ªùi gian r·∫£nh (ƒë·ªÉ h·ªçc vi√™n c√≥ th·ªÉ ƒë·∫∑t l·ªãch)</h3>
              <p className="form-hint">Ch·ªçn c√°c khung gi·ªù b·∫°n c√≥ th·ªÉ d·∫°y trong tu·∫ßn</p>
              
              <div className="availability-grid">
                {['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'].map((day, dayIndex) => (
                  <div key={dayIndex} className="day-slot">
                    <h4>{day}</h4>
                    <div className="time-slots">
                      {['18:00', '19:00', '20:00', '21:00'].map((time) => {
                        const slotKey = `${dayIndex}_${time}`;
                        const isChecked = formData.availability.some(
                          s => s.dayOfWeek === dayIndex && s.start === time
                        );
                        
                        return (
                          <label key={slotKey} className="time-slot-checkbox">
                            <input
                              type="checkbox"
                              checked={isChecked}
                              onChange={() => {
                                if (isChecked) {
                                  // Remove slot
                                  setFormData(prev => ({
                                    ...prev,
                                    availability: prev.availability.filter(
                                      s => !(s.dayOfWeek === dayIndex && s.start === time)
                                    )
                                  }));
                                } else {
                                  // Add slot (2 hours duration)
                                  const [hour, min] = time.split(':').map(Number);
                                  const endHour = String(hour + 2).padStart(2, '0');
                                  const endTime = `${endHour}:${min}`;
                                  
                                  setFormData(prev => ({
                                    ...prev,
                                    availability: [
                                      ...prev.availability,
                                      { dayOfWeek: dayIndex, start: time, end: endTime }
                                    ]
                                  }));
                                }
                              }}
                            />
                            <span>{time}</span>
                          </label>
                        );
                      })}
                    </div>
                  </div>
                ))}
              </div>
              
              {formData.availability.length > 0 && (
                <div className="selected-slots">
                  <p>ƒê√£ ch·ªçn {formData.availability.length} khung gi·ªù r·∫£nh</p>
                </div>
              )}
            </div>

            {/* Action buttons */}
            <div className="form-actions">
              <button
                type="button"
                onClick={handleCancel}
                className="btn-cancel"
                disabled={loading}
              >
                H·ªßy
              </button>
              <button
                type="submit"
                className="btn-submit"
                disabled={loading}
              >
                {loading ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t h·ªì s∆°'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default TutorProfileUpdatePage;
