import React, { useEffect, useState } from 'react';
import AdminService from '../../services/AdminService';
import './AdminTutors.modern.css';

const AdminTutors = () => {
  const [tutors, setTutors] = useState([]);
  const [error, setError] = useState(null);
  const [selectedTutor, setSelectedTutor] = useState(null);
  const [actionLoading, setActionLoading] = useState(false);
  const [successMsg, setSuccessMsg] = useState('');
  const [approveModal, setApproveModal] = useState({ open: false, tutor: null });
  const [confirmModal, setConfirmModal] = useState({ open: false, title: '', message: '', onConfirm: null });

  useEffect(() => {
    fetchTutors();
  }, []);

  const fetchTutors = async () => {
    console.log('üîÑ fetchTutors called');
    setError(null);
    try {
      console.log('üì° Calling AdminService.getTutors()...');
      const res = await AdminService.getTutors();
      console.log('üìä API response:', res);
      console.log('üìã Tutors data:', res.data.tutors);
      setTutors(res.data.tutors || []);
    } catch (err) {
      console.error('‚ùå Error fetching tutors:', err);
      setError('L·ªói t·∫£i danh s√°ch tutor.');
    }
  };

  const handleApprove = (tutor) => {
    setApproveModal({ open: true, tutor });
  };

  const confirmApprove = async () => {
    console.log('üîç confirmApprove called');
    console.log('Tutor ID:', approveModal.tutor._id);
    console.log('Tutor data:', approveModal.tutor);
    
    setActionLoading(true);
    try {
      // C·∫≠p nh·∫≠t status tutor th√†nh approved
      console.log('üì° Calling updateTutorStatus API...');
      const result = await AdminService.updateTutorStatus(approveModal.tutor._id, 'approved');
      console.log('‚úÖ API response:', result);
      console.log('‚úÖ Updated tutor status:', result.data?.status);
      
      setSuccessMsg('Duy·ªát tutor th√†nh c√¥ng!');
      setApproveModal({ open: false, tutor: null });
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccessMsg(''), 3000);
      
      console.log('üîÑ Refreshing tutors list...');
      await fetchTutors();
      
      // Log current tutors after refresh
      console.log('üìä Tutors after refresh:', tutors);
    } catch (err) {
      console.error('‚ùå Error approving tutor:', err);
      console.error('‚ùå Error details:', err.response?.data);
      setError(`L·ªói duy·ªát tutor: ${err.message || 'Unknown error'}`);
    } finally {
      setActionLoading(false);
    }
  };

  // Khi click chi ti·∫øt, fetch ƒë·∫ßy ƒë·ªß tutor
  const handleShowDetail = async (tutor) => {
    setSelectedTutor(tutor); // show modal ngay ƒë·ªÉ UX t·ªët
    try {
      const res = await AdminService.getTutorById(tutor._id);
      setSelectedTutor(res.data || tutor);
    } catch (e) {
      setSelectedTutor(tutor);
    }
  };

  // Ch·ªâ hi·ªÉn th·ªã ƒë∆°n c·ªßa user ch∆∞a c√≥ role tutor
  function isNotTutorRole(tutor) {
    return !(tutor.user && tutor.user.role === 'tutor');
  }
  // ƒê∆°n ƒë√£ duy·ªát: status="approved" ho·∫∑c verified=true
  const approvedTutors = tutors.filter(tutor => tutor.status === 'approved' || tutor.verified);
  // ƒê∆°n b·ªã t·ª´ ch·ªëi: status="rejected" ho·∫∑c rejected=true
  const rejectedTutors = tutors.filter(tutor => tutor.status === 'rejected' || tutor.rejected);
  // ƒê∆°n ch·ªù duy·ªát: status="pending" ho·∫∑c ch∆∞a verified, ch∆∞a rejected
  const pendingTutors = tutors.filter(tutor => 
    (tutor.status === 'pending' || (!tutor.verified && !tutor.rejected)) && 
    isNotTutorRole(tutor)
  );

  // Debug logs
  console.log('üîç Debug filter logic:');
  console.log('Total tutors:', tutors.length);
  console.log('Pending tutors:', pendingTutors.length);
  console.log('Approved tutors:', approvedTutors.length);
  console.log('Rejected tutors:', rejectedTutors.length);
  console.log('Tutors data:', tutors.map(t => ({
    id: t._id,
    name: t.user?.full_name,
    status: t.status,
    verified: t.verified,
    rejected: t.rejected,
    userRole: t.user?.role,
    shouldShowApprove: (t.status === 'pending' || !t.status || (!t.verified && !t.rejected))
  })));

  // Test function ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
  const testTutorStatus = (tutor) => {
    console.log('üß™ Testing tutor status:', {
      id: tutor._id,
      name: tutor.user?.full_name,
      status: tutor.status,
      verified: tutor.verified,
      rejected: tutor.rejected,
      shouldShowApprove: (tutor.status === 'pending' || !tutor.status || (!tutor.verified && !tutor.rejected)),
      shouldShowReject: (tutor.status === 'pending' || !tutor.status || (!tutor.verified && !tutor.rejected))
    });
  };

  const showConfirm = (title, message, onConfirm) => {
    setConfirmModal({
      open: true,
      title,
      message,
      onConfirm: () => {
        onConfirm();
        setConfirmModal({ open: false, title: '', message: '', onConfirm: null });
      }
    });
  };

  const showAlert = (message) => {
    setConfirmModal({
      open: true,
      title: 'Th√¥ng b√°o',
      message,
      onConfirm: () => setConfirmModal({ open: false, title: '', message: '', onConfirm: null })
    });
  };

  // Helper function ƒë·ªÉ chu·∫©n h√≥a URL ·∫£nh
  const toUrl = (url) => {
    if (!url) return '';
    if (url.startsWith('http')) return url;
    const baseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';
    return `${baseUrl}/${url.replace(/^\/?/, '')}`;
  };

  return (
    <div className="admin-tutors-page">
      {/* Header Section */}
      <div className="admin-tutors-header">
        <div className="admin-tutors-header-content">
          <div className="admin-tutors-title-section">
            <h1 className="admin-tutors-title">Qu·∫£n l√Ω Gia s∆∞</h1>
            <p className="admin-tutors-subtitle">Duy·ªát v√† qu·∫£n l√Ω c√°c ƒë∆°n ƒëƒÉng k√Ω l√†m gia s∆∞</p>
      </div>
          <div className="admin-tutors-stats">
            <div className="admin-stat-card">
              <div className="admin-stat-icon">üë•</div>
              <div className="admin-stat-content">
                <span className="admin-stat-number">{pendingTutors.length}</span>
                <span className="admin-stat-label">Ch·ªù duy·ªát</span>
            </div>
          </div>
          </div>
        </div>
      </div>

      {/* Alert Messages */}
      {error && (
        <div className="admin-alert admin-alert-error">
          <div className="admin-alert-icon">‚ö†Ô∏è</div>
          <div className="admin-alert-content">
            <span className="admin-alert-title">L·ªói</span>
            <span className="admin-alert-message">{error}</span>
          </div>
        </div>
      )}
      
      {successMsg && (
        <div className="admin-alert admin-alert-success">
          <div className="admin-alert-icon">‚úÖ</div>
          <div className="admin-alert-content">
            <span className="admin-alert-title">Th√†nh c√¥ng</span>
            <span className="admin-alert-message">{successMsg}</span>
          </div>
        </div>
      )}

      {/* Table Section */}
      <div className="admin-tutors-table-container">
        <div className="admin-table-header">
          <h3 className="admin-table-title">Danh s√°ch ƒë∆°n ƒëƒÉng k√Ω</h3>
           <div className="admin-table-actions">
             <button 
               className="admin-btn admin-btn-secondary admin-btn-sm"
               onClick={() => {
                 console.log('üß™ Testing API...');
                 fetchTutors();
               }}
             >
               <span className="admin-btn-icon">üîÑ</span>
               Refresh
             </button>
             <button className="admin-btn admin-btn-secondary admin-btn-sm">
               <span className="admin-btn-icon">üìä</span>
               Xu·∫•t b√°o c√°o
             </button>
           </div>
          </div>

        <div className="admin-table-wrapper">
          <table className="admin-table">
            <thead className="admin-table-thead">
              <tr>
                <th className="admin-table-th">Gia s∆∞</th>
                <th className="admin-table-th">Th√¥ng tin li√™n h·ªá</th>
                <th className="admin-table-th">Tr·∫°ng th√°i</th>
                <th className="admin-table-th">Ng√†y ƒëƒÉng k√Ω</th>
                <th className="admin-table-th admin-table-th-actions">H√†nh ƒë·ªông</th>
                  </tr>
                </thead>
            <tbody className="admin-table-tbody">
              {pendingTutors.length === 0 ? (
                <tr>
                  <td colSpan={5} className="admin-table-empty">
                    <div className="admin-empty-state">
                      <div className="admin-empty-icon">üìã</div>
                      <h3 className="admin-empty-title">Kh√¥ng c√≥ ƒë∆°n n√†o ch·ªù duy·ªát</h3>
                      <p className="admin-empty-message">T·∫•t c·∫£ ƒë∆°n ƒëƒÉng k√Ω ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω</p>
                            </div>
                  </td>
                </tr>
              ) : pendingTutors.map(tutor => (
                <tr key={tutor._id} className="admin-table-row">
                  <td className="admin-table-td">
                    <div className="admin-tutor-info">
                      <div className="admin-tutor-avatar">
                        <span>{tutor.user?.full_name?.charAt(0) || tutor.full_name?.charAt(0) || '?'}</span>
                          </div>
                      <div className="admin-tutor-details">
                        <span className="admin-tutor-name">
                          {tutor.user?.full_name || tutor.full_name}
                        </span>
                        <span className="admin-tutor-id">ID: {tutor._id.slice(-8)}</span>
                          </div>
                        </div>
                      </td>
                  <td className="admin-table-td">
                    <div className="admin-contact-info">
                      <div className="admin-contact-item">
                        <span className="admin-contact-icon">üìß</span>
                        <span className="admin-contact-text">{tutor.user?.email || tutor.email}</span>
                      </div>
                        </div>
                      </td>
                   <td className="admin-table-td">
                     {tutor.status === 'approved' ? (
                       <span className="admin-status-badge admin-status-approved">
                         <span className="admin-status-icon">‚úÖ</span>
                         ƒê√£ duy·ªát
                       </span>
                     ) : tutor.status === 'rejected' ? (
                       <span className="admin-status-badge admin-status-rejected">
                         <span className="admin-status-icon">‚ùå</span>
                         ƒê√£ t·ª´ ch·ªëi
                       </span>
                     ) : (
                       <span className="admin-status-badge admin-status-pending">
                         <span className="admin-status-icon">‚è≥</span>
                         Ch·ªù duy·ªát
                       </span>
                     )}
                      </td>
                  <td className="admin-table-td">
                    <span className="admin-date">
                      {tutor.createdAt ? new Date(tutor.createdAt).toLocaleDateString('vi-VN') : 'N/A'}
                    </span>
                      </td>
                   <td className="admin-table-td admin-table-td-actions">
                     <div className="admin-action-buttons">
                       {/* Ch·ªâ hi·ªÉn th·ªã button Duy·ªát n·∫øu status l√† pending ho·∫∑c ch∆∞a c√≥ status */}
                       {(tutor.status === 'pending' || !tutor.status || (!tutor.verified && !tutor.rejected)) && (
                         <button 
                           className="admin-btn admin-btn-success admin-btn-sm"
                           disabled={actionLoading} 
                           onClick={() => handleApprove(tutor)}
                           title="Duy·ªát gia s∆∞"
                         >
                           <span className="admin-btn-icon">‚úÖ</span>
                           Duy·ªát
                         </button>
                       )}
                       
                       {/* Ch·ªâ hi·ªÉn th·ªã button T·ª´ ch·ªëi n·∫øu status l√† pending ho·∫∑c ch∆∞a c√≥ status */}
                       {(tutor.status === 'pending' || !tutor.status || (!tutor.verified && !tutor.rejected)) && (
                          <button
                           className="admin-btn admin-btn-danger admin-btn-sm"
                           disabled
                           title="T·ª´ ch·ªëi ƒë∆°n"
                         >
                           <span className="admin-btn-icon">‚ùå</span>
                           T·ª´ ch·ªëi
                          </button>
                       )}
                       
                       {/* Hi·ªÉn th·ªã tr·∫°ng th√°i n·∫øu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω */}
                       {tutor.status === 'approved' && (
                         <span className="admin-status-badge admin-status-approved">
                           <span className="admin-status-icon">‚úÖ</span>
                           ƒê√£ duy·ªát
                         </span>
                       )}
                       
                       {tutor.status === 'rejected' && (
                         <span className="admin-status-badge admin-status-rejected">
                           <span className="admin-status-icon">‚ùå</span>
                           ƒê√£ t·ª´ ch·ªëi
                         </span>
                       )}
                       
                       {/* Button Chi ti·∫øt lu√¥n hi·ªÉn th·ªã */}
                              <button
                         className="admin-btn admin-btn-info admin-btn-sm"
                         onClick={() => handleShowDetail(tutor)}
                         title="Xem chi ti·∫øt"
                       >
                         <span className="admin-btn-icon">‚ÑπÔ∏è</span>
                         Chi ti·∫øt
                              </button>
                       
                       {/* Button Test ƒë·ªÉ debug */}
                              <button
                         className="admin-btn admin-btn-secondary admin-btn-sm"
                         onClick={() => testTutorStatus(tutor)}
                         title="Test tr·∫°ng th√°i"
                       >
                         <span className="admin-btn-icon">üß™</span>
                         Test
                              </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
      </div>
      {/* Modal duy·ªát tutor */}
      {approveModal.open && (
        <div className="modal-overlay">
          <div className="modal-content">
            <button className="modal-close" onClick={()=>setApproveModal({open:false,tutor:null})}>&times;</button>
            <h3 className="modal-title">
              <span className="approve-icon" role="img" aria-label="approve">‚úÖ</span> Duy·ªát Tutor
            </h3>
            <div className="modal-text">
              B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát <b>{approveModal.tutor.user?.full_name}</b> th√†nh tutor kh√¥ng?
            </div>
            <div className="modal-actions">
              <button className="admin-btn admin-btn-success" disabled={actionLoading} onClick={confirmApprove}>
                {actionLoading ? 'ƒêang x·ª≠ l√Ω...' : <><span className="admin-btn-icon">‚úÖ</span> X√°c nh·∫≠n duy·ªát</>}
                  </button>
              <button className="admin-btn admin-btn-secondary" onClick={()=>setApproveModal({open:false,tutor:null})}>
                H·ªßy
                  </button>
                </div>
          </div>
                  </div>
      )}
       {/* Modal chi ti·∫øt tutor */}
       {selectedTutor && (
         <div className="modal-overlay">
           <div className="modal-content modal-content-large">
                        <button
               className="modal-close" 
               onClick={() => setSelectedTutor(null)}
             >
               &times;
                        </button>
             
             <h3 className="modal-title">
               <span className="modal-title-icon">üë§</span>
               Chi ti·∫øt gia s∆∞: {selectedTutor.user?.full_name || selectedTutor.full_name}
             </h3>

             <div className="tutor-detail-content">
               {/* Th√¥ng tin c∆° b·∫£n */}
               <div className="detail-section">
                 <h4 className="detail-section-title">üìã Th√¥ng tin c∆° b·∫£n</h4>
                 <div className="detail-grid">
                   <div className="detail-item">
                     <span className="detail-label">H·ªç t√™n:</span>
                     <span className="detail-value">{selectedTutor.user?.full_name || selectedTutor.full_name}</span>
                   </div>
                   <div className="detail-item">
                     <span className="detail-label">Email:</span>
                     <span className="detail-value">{selectedTutor.user?.email || selectedTutor.email}</span>
                   </div>
                   <div className="detail-item">
                     <span className="detail-label">S·ªë ƒëi·ªán tho·∫°i:</span>
                     <span className="detail-value">{selectedTutor.user?.phone_number || selectedTutor.phone_number || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                   </div>
                   <div className="detail-item">
                     <span className="detail-label">Tr·∫°ng th√°i:</span>
                     <span className={`detail-value status-${selectedTutor.status || 'pending'}`}>
                       {selectedTutor.status === 'approved' ? '‚úÖ ƒê√£ duy·ªát' :
                        selectedTutor.status === 'rejected' ? '‚ùå ƒê√£ t·ª´ ch·ªëi' : '‚è≥ Ch·ªù duy·ªát'}
                     </span>
                   </div>
                 </div>
               </div>

               {/* Th√¥ng tin chuy√™n m√¥n */}
               <div className="detail-section">
                 <h4 className="detail-section-title">üéì Th√¥ng tin chuy√™n m√¥n</h4>
                 <div className="detail-grid">
                   <div className="detail-item">
                     <span className="detail-label">M√¥n h·ªçc:</span>
                     <span className="detail-value">
                       {selectedTutor.subjects && selectedTutor.subjects.length > 0 ? (
                         selectedTutor.subjects.map((subject, index) => (
                           <span key={index} className="subject-tag">
                             {typeof subject === 'string' ? subject : (subject.name || subject)}
                             {typeof subject === 'object' && subject.level && ` (${subject.level})`}
                           </span>
                         ))
                       ) : 'Ch∆∞a c·∫≠p nh·∫≠t'}
                     </span>
                   </div>
                   <div className="detail-item">
                     <span className="detail-label">Kinh nghi·ªám:</span>
                     <span className="detail-value">{selectedTutor.experienceYears || selectedTutor.experience || 0} nƒÉm</span>
                   </div>
                   <div className="detail-item">
                     <span className="detail-label">M·ª©c ph√≠:</span>
                     <span className="detail-value">
                       {selectedTutor.sessionRate || selectedTutor.hourlyRate || selectedTutor.price || 0} VNƒê/bu·ªïi
                     </span>
                   </div>
                   <div className="detail-item">
                     <span className="detail-label">Th√†nh ph·ªë:</span>
                     <span className="detail-value">{selectedTutor.city || selectedTutor.location || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                  </div>
                </div>
              </div>

               {/* M√¥ t·∫£ v√† gi·ªõi thi·ªáu */}
               <div className="detail-section">
                 <h4 className="detail-section-title">üìù M√¥ t·∫£</h4>
                 <div className="detail-description">
                   {selectedTutor.description || selectedTutor.bio || 'Ch∆∞a c√≥ m√¥ t·∫£'}
                 </div>
      </div>

               {/* T√†i li·ªáu ƒë√≠nh k√®m */}
               <div className="detail-section">
                 <div className="detail-section-header">
                   <h4 className="detail-section-title">üìÑ T√†i li·ªáu ƒë√≠nh k√®m</h4>
                   <div className="detail-section-actions">
                     <button 
                       className="admin-btn admin-btn-info admin-btn-sm"
                       onClick={() => {
                         // Collect all images
                         const allImages = [];
                         if (selectedTutor.profileImage) allImages.push({url: toUrl(selectedTutor.profileImage), name: '·∫¢nh ƒë·∫°i di·ªán'});
                         if (selectedTutor.verification?.degreeDocuments) {
                           selectedTutor.verification.degreeDocuments.forEach((doc, i) => {
                             allImages.push({url: toUrl(doc), name: `B·∫±ng c·∫•p ${i+1}`});
                           });
                         }
                         if (selectedTutor.verification?.idDocuments) {
                           selectedTutor.verification.idDocuments.forEach((doc, i) => {
                             allImages.push({url: toUrl(doc), name: `CMND ${i+1}`});
                           });
                         }
                         if (selectedTutor.verification?.otherDocuments) {
                           selectedTutor.verification.otherDocuments.forEach((doc, i) => {
                             allImages.push({url: toUrl(doc), name: `T√†i li·ªáu ${i+1}`});
                           });
                         }
                         if (selectedTutor.portfolio) {
                           selectedTutor.portfolio.forEach((item, i) => {
                             allImages.push({url: toUrl(item.image || item), name: item.title || `Portfolio ${i+1}`});
                           });
                         }
                         if (selectedTutor.gallery) {
                           selectedTutor.gallery.forEach((image, i) => {
                             allImages.push({url: toUrl(image), name: `·∫¢nh ${i+1}`});
                           });
                         }
                         if (selectedTutor.uploads) {
                           selectedTutor.uploads.forEach((upload, i) => {
                             allImages.push({url: toUrl(upload.url || upload), name: upload.name || upload.filename || `T·ªáp ${i+1}`});
                           });
                         }
                         if (selectedTutor.images) {
                           selectedTutor.images.forEach((image, i) => {
                             allImages.push({url: toUrl(image), name: `·∫¢nh ${i+1}`});
                           });
                         }
                         
                         console.log('üñºÔ∏è T·∫•t c·∫£ ·∫£nh:', allImages);
                         showAlert(`T·ªïng c·ªông: ${allImages.length} ·∫£nh. Xem console ƒë·ªÉ xem danh s√°ch ƒë·∫ßy ƒë·ªß.`);
                       }}
                     >
                       <span className="admin-btn-icon">üñºÔ∏è</span>
                       Xem t·∫•t c·∫£ ·∫£nh
                     </button>
                     
                <button
                       className="admin-btn admin-btn-success admin-btn-sm"
                       onClick={() => {
                         showConfirm(
                           'X√°c nh·∫≠n duy·ªát',
                           'B·∫°n c√≥ ch·∫Øc mu·ªën t·ª± ƒë·ªông duy·ªát t·∫•t c·∫£ t√†i li·ªáu c·ªßa gia s∆∞ n√†y?',
                           async () => {
                             try {
                               // Auto verify all documents
                               const verificationData = {
                                 degreeStatus: 'verified',
                                 idStatus: 'verified',
                                 otherStatus: 'verified'
                               };
                               
                               await AdminService.updateTutorVerification(selectedTutor._id, verificationData);
                               showAlert('‚úÖ ƒê√£ t·ª± ƒë·ªông duy·ªát t·∫•t c·∫£ t√†i li·ªáu!');
                               setSelectedTutor(null);
                               fetchTutors(); // Refresh list
                             } catch (error) {
                               console.error('Error auto-verifying:', error);
                               showAlert('‚ùå L·ªói khi duy·ªát t√†i li·ªáu');
                             }
                           }
                         );
                       }}
                     >
                       <span className="admin-btn-icon">‚úÖ</span>
                       T·ª± ƒë·ªông duy·ªát
                </button>
              </div>
                 </div>
                 <div className="document-grid">
                   {/* ·∫¢nh ƒë·∫°i di·ªán */}
                   {selectedTutor.profileImage && (
                     <div className="document-category">
                       <h5 className="document-category-title">üñºÔ∏è ·∫¢nh ƒë·∫°i di·ªán</h5>
                       <div className="document-list">
                         <div className="document-item">
                           <img 
                             src={toUrl(selectedTutor.profileImage)} 
                             alt="·∫¢nh ƒë·∫°i di·ªán"
                             className="document-thumbnail"
                             onClick={() => window.open(toUrl(selectedTutor.profileImage), '_blank')}
                             onError={(e) => {
                               e.target.style.display = 'none';
                               e.target.nextSibling.textContent = 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh';
                             }}
                           />
                           <span className="document-name">·∫¢nh ƒë·∫°i di·ªán</span>
                  </div>
                  </div>
                </div>
                   )}

                   {/* B·∫±ng c·∫•p */}
                   {selectedTutor.verification?.degreeDocuments && selectedTutor.verification.degreeDocuments.length > 0 && (
                     <div className="document-category">
                       <h5 className="document-category-title">üéì B·∫±ng c·∫•p ({selectedTutor.verification.degreeDocuments.length})</h5>
                       <div className="document-list">
                         {selectedTutor.verification.degreeDocuments.map((doc, index) => (
                           <div key={index} className="document-item">
                             <img 
                               src={toUrl(doc)} 
                               alt={`B·∫±ng c·∫•p ${index + 1}`}
                               className="document-thumbnail"
                               onClick={() => window.open(toUrl(doc), '_blank')}
                               onError={(e) => {
                                 e.target.style.display = 'none';
                                 e.target.nextSibling.textContent = 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh';
                               }}
                             />
                             <span className="document-name">B·∫±ng c·∫•p {index + 1}</span>
                           </div>
                         ))}
                       </div>
                </div>
                   )}

                   {/* CMND/CCCD */}
                   {selectedTutor.verification?.idDocuments && selectedTutor.verification.idDocuments.length > 0 && (
                     <div className="document-category">
                       <h5 className="document-category-title">üÜî CMND/CCCD ({selectedTutor.verification.idDocuments.length})</h5>
                       <div className="document-list">
                         {selectedTutor.verification.idDocuments.map((doc, index) => (
                           <div key={index} className="document-item">
                             <img 
                               src={toUrl(doc)} 
                               alt={`CMND ${index + 1}`}
                               className="document-thumbnail"
                               onClick={() => window.open(toUrl(doc), '_blank')}
                               onError={(e) => {
                                 e.target.style.display = 'none';
                                 e.target.nextSibling.textContent = 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh';
                               }}
                             />
                             <span className="document-name">CMND {index + 1}</span>
                  </div>
                         ))}
                  </div>
                </div>
                   )}

                   {/* ·∫¢nh kh√°c t·ª´ verification */}
                   {selectedTutor.verification?.otherDocuments && selectedTutor.verification.otherDocuments.length > 0 && (
                     <div className="document-category">
                       <h5 className="document-category-title">üì∑ T√†i li·ªáu kh√°c ({selectedTutor.verification.otherDocuments.length})</h5>
                       <div className="document-list">
                         {selectedTutor.verification.otherDocuments.map((doc, index) => (
                           <div key={index} className="document-item">
                             <img 
                               src={toUrl(doc)} 
                               alt={`T√†i li·ªáu ${index + 1}`}
                               className="document-thumbnail"
                               onClick={() => window.open(toUrl(doc), '_blank')}
                               onError={(e) => {
                                 e.target.style.display = 'none';
                                 e.target.nextSibling.textContent = 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh';
                               }}
                             />
                             <span className="document-name">T√†i li·ªáu {index + 1}</span>
                           </div>
                    ))}
                  </div>
                </div>
                   )}

                   {/* ·∫¢nh t·ª´ portfolio */}
                   {selectedTutor.portfolio && selectedTutor.portfolio.length > 0 && (
                     <div className="document-category">
                       <h5 className="document-category-title">üé® Portfolio ({selectedTutor.portfolio.length})</h5>
                       <div className="document-list">
                         {selectedTutor.portfolio.map((item, index) => (
                           <div key={index} className="document-item">
                             <img 
                               src={toUrl(item.image || item)} 
                               alt={`Portfolio ${index + 1}`}
                               className="document-thumbnail"
                               onClick={() => window.open(toUrl(item.image || item), '_blank')}
                               onError={(e) => {
                                 e.target.style.display = 'none';
                                 e.target.nextSibling.textContent = 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh';
                               }}
                             />
                             <span className="document-name">
                               {item.title || `Portfolio ${index + 1}`}
                      </span>
                    </div>
                         ))}
                       </div>
                     </div>
                   )}

                   {/* ·∫¢nh t·ª´ gallery */}
                   {selectedTutor.gallery && selectedTutor.gallery.length > 0 && (
                     <div className="document-category">
                       <h5 className="document-category-title">üñºÔ∏è Th∆∞ vi·ªán ·∫£nh ({selectedTutor.gallery.length})</h5>
                       <div className="document-list">
                         {selectedTutor.gallery.map((image, index) => (
                           <div key={index} className="document-item">
                             <img 
                               src={toUrl(image)} 
                               alt={`·∫¢nh ${index + 1}`}
                               className="document-thumbnail"
                               onClick={() => window.open(toUrl(image), '_blank')}
                               onError={(e) => {
                                 e.target.style.display = 'none';
                                 e.target.nextSibling.textContent = 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh';
                               }}
                             />
                             <span className="document-name">·∫¢nh {index + 1}</span>
                           </div>
                         ))}
                       </div>
                     </div>
                   )}

                   {/* T·∫•t c·∫£ ·∫£nh t·ª´ uploads */}
                   {selectedTutor.uploads && selectedTutor.uploads.length > 0 && (
                     <div className="document-category">
                       <h5 className="document-category-title">üìÅ T·ªáp ƒë√£ t·∫£i l√™n ({selectedTutor.uploads.length})</h5>
                       <div className="document-list">
                         {selectedTutor.uploads.map((upload, index) => (
                           <div key={index} className="document-item">
                             <img 
                               src={toUrl(upload.url || upload)} 
                               alt={`T·ªáp ${index + 1}`}
                               className="document-thumbnail"
                               onClick={() => window.open(toUrl(upload.url || upload), '_blank')}
                               onError={(e) => {
                                 e.target.style.display = 'none';
                                 e.target.nextSibling.textContent = 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh';
                               }}
                             />
                             <span className="document-name">
                               {upload.name || upload.filename || `T·ªáp ${index + 1}`}
                      </span>
                    </div>
                         ))}
                       </div>
                     </div>
                   )}

                   {/* Debug: Hi·ªÉn th·ªã t·∫•t c·∫£ ·∫£nh c√≥ th·ªÉ c√≥ */}
                   {selectedTutor.images && selectedTutor.images.length > 0 && (
                     <div className="document-category">
                       <h5 className="document-category-title">üñºÔ∏è ·∫¢nh kh√°c ({selectedTutor.images.length})</h5>
                       <div className="document-list">
                         {selectedTutor.images.map((image, index) => (
                           <div key={index} className="document-item">
                             <img 
                               src={toUrl(image)} 
                               alt={`·∫¢nh ${index + 1}`}
                               className="document-thumbnail"
                               onClick={() => window.open(toUrl(image), '_blank')}
                               onError={(e) => {
                                 e.target.style.display = 'none';
                                 e.target.nextSibling.textContent = 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh';
                               }}
                             />
                             <span className="document-name">·∫¢nh {index + 1}</span>
                           </div>
                         ))}
                       </div>
                     </div>
                   )}

                   {/* N·∫øu kh√¥ng c√≥ t√†i li·ªáu */}
                   {(!selectedTutor.verification?.degreeDocuments?.length && 
                     !selectedTutor.verification?.idDocuments?.length && 
                     !selectedTutor.verification?.otherDocuments?.length &&
                     !selectedTutor.portfolio?.length &&
                     !selectedTutor.gallery?.length &&
                     !selectedTutor.uploads?.length &&
                     !selectedTutor.images?.length &&
                     !selectedTutor.profileImage) && (
                     <div className="no-documents">
                       <span className="no-documents-icon">üìÑ</span>
                       <span className="no-documents-text">Ch∆∞a c√≥ t√†i li·ªáu ƒë√≠nh k√®m</span>
                     </div>
                   )}
                  </div>
                </div>
                
               {/* Th√¥ng tin x√°c th·ª±c */}
               <div className="detail-section">
                 <h4 className="detail-section-title">‚úÖ Tr·∫°ng th√°i x√°c th·ª±c</h4>
                 <div className="verification-grid">
                   <div className="verification-item">
                     <span className="verification-label">B·∫±ng c·∫•p:</span>
                     <div className="verification-controls">
                       <span className={`verification-status ${selectedTutor.verification?.degreeStatus || 'pending'}`}>
                         {selectedTutor.verification?.degreeStatus === 'verified' ? '‚úÖ ƒê√£ x√°c th·ª±c' :
                          selectedTutor.verification?.degreeStatus === 'rejected' ? '‚ùå T·ª´ ch·ªëi' : '‚è≥ Ch·ªù x√°c th·ª±c'}
                       </span>
                       {(selectedTutor.verification?.degreeStatus !== 'verified' && selectedTutor.verification?.degreeStatus !== 'rejected') && (
                         <div className="verification-buttons">
                           <button 
                             className="admin-btn admin-btn-success admin-btn-xs"
                             onClick={() => {
                               showConfirm(
                                 'X√°c nh·∫≠n duy·ªát',
                                 'B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát b·∫±ng c·∫•p c·ªßa gia s∆∞ n√†y?',
                                 async () => {
                                   try {
                                     await AdminService.updateTutorVerification(selectedTutor._id, {
                                       degreeStatus: 'verified'
                                     });
                                     showAlert('‚úÖ ƒê√£ duy·ªát b·∫±ng c·∫•p!');
                                     setSelectedTutor(null);
                                     fetchTutors();
                                   } catch (error) {
                                     showAlert('‚ùå L·ªói khi duy·ªát b·∫±ng c·∫•p');
                                   }
                                 }
                               );
                             }}
                           >
                             Duy·ªát
                           </button>
                           <button 
                             className="admin-btn admin-btn-danger admin-btn-xs"
                             onClick={() => {
                               showConfirm(
                                 'X√°c nh·∫≠n t·ª´ ch·ªëi',
                                 'B·∫°n c√≥ ch·∫Øc mu·ªën t·ª´ ch·ªëi b·∫±ng c·∫•p c·ªßa gia s∆∞ n√†y?',
                                 async () => {
                                   try {
                                     await AdminService.updateTutorVerification(selectedTutor._id, {
                                       degreeStatus: 'rejected'
                                     });
                                     showAlert('‚ùå ƒê√£ t·ª´ ch·ªëi b·∫±ng c·∫•p!');
                                     setSelectedTutor(null);
                                     fetchTutors();
                                   } catch (error) {
                                     showAlert('‚ùå L·ªói khi t·ª´ ch·ªëi b·∫±ng c·∫•p');
                                   }
                                 }
                               );
                             }}
                           >
                             T·ª´ ch·ªëi
                           </button>
                  </div>
                )}
              </div>
                   </div>
                   <div className="verification-item">
                     <span className="verification-label">CMND/CCCD:</span>
                     <div className="verification-controls">
                       <span className={`verification-status ${selectedTutor.verification?.idStatus || 'pending'}`}>
                         {selectedTutor.verification?.idStatus === 'verified' ? '‚úÖ ƒê√£ x√°c th·ª±c' :
                          selectedTutor.verification?.idStatus === 'rejected' ? '‚ùå T·ª´ ch·ªëi' : '‚è≥ Ch·ªù x√°c th·ª±c'}
                       </span>
                       {(selectedTutor.verification?.idStatus !== 'verified' && selectedTutor.verification?.idStatus !== 'rejected') && (
                         <div className="verification-buttons">
                <button
                             className="admin-btn admin-btn-success admin-btn-xs"
                             onClick={() => {
                               showConfirm(
                                 'X√°c nh·∫≠n duy·ªát',
                                 'B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát CMND/CCCD c·ªßa gia s∆∞ n√†y?',
                                 async () => {
                                   try {
                                     await AdminService.updateTutorVerification(selectedTutor._id, {
                                       idStatus: 'verified'
                                     });
                                     showAlert('‚úÖ ƒê√£ duy·ªát CMND/CCCD!');
                                     setSelectedTutor(null);
                                     fetchTutors();
                                   } catch (error) {
                                     showAlert('‚ùå L·ªói khi duy·ªát CMND/CCCD');
                                   }
                                 }
                               );
                             }}
                           >
                             Duy·ªát
                </button>
                <button
                             className="admin-btn admin-btn-danger admin-btn-xs"
                             onClick={() => {
                               showConfirm(
                                 'X√°c nh·∫≠n t·ª´ ch·ªëi',
                                 'B·∫°n c√≥ ch·∫Øc mu·ªën t·ª´ ch·ªëi CMND/CCCD c·ªßa gia s∆∞ n√†y?',
                                 async () => {
                                   try {
                                     await AdminService.updateTutorVerification(selectedTutor._id, {
                                       idStatus: 'rejected'
                                     });
                                     showAlert('‚ùå ƒê√£ t·ª´ ch·ªëi CMND/CCCD!');
                                     setSelectedTutor(null);
                                     fetchTutors();
                                   } catch (error) {
                                     showAlert('‚ùå L·ªói khi t·ª´ ch·ªëi CMND/CCCD');
                                   }
                                 }
                               );
                             }}
                           >
                             T·ª´ ch·ªëi
                </button>
                         </div>
                       )}
                     </div>
                   </div>
                 </div>
               </div>

               {/* Debug: T·∫•t c·∫£ d·ªØ li·ªáu */}
               <div className="detail-section">
                 <h4 className="detail-section-title">üîç T·∫•t c·∫£ d·ªØ li·ªáu (Debug)</h4>
                 <div className="debug-data">
                   <pre className="debug-json">
                     {JSON.stringify(selectedTutor, null, 2)}
                   </pre>
                 </div>
               </div>
             </div>

             <div className="modal-actions">
                <button
                 className="admin-btn admin-btn-secondary"
                 onClick={() => setSelectedTutor(null)}
                >
                 ƒê√≥ng
                </button>
            </div>
          </div>
         </div>
       )}

       {/* Custom Confirm Modal */}
       {confirmModal.open && (
         <div className="modal-overlay">
           <div className="modal-content">
             <h3 className="modal-title">{confirmModal.title}</h3>
             <p className="modal-message">{confirmModal.message}</p>
             <div className="modal-actions">
               <button 
                 className="admin-btn admin-btn-secondary"
                 onClick={() => setConfirmModal({ open: false, title: '', message: '', onConfirm: null })}
               >
                 H·ªßy
                </button>
                <button
                 className="admin-btn admin-btn-primary"
                 onClick={confirmModal.onConfirm}
                >
                 X√°c nh·∫≠n
                </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminTutors;
