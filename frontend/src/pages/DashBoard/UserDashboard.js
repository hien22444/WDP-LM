import React, { useEffect, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import AOS from "aos";
import "aos/dist/aos.css";
import "./Dashboard.scss";
import DashboardService from "../../services/DashboardService";
import { loadCurrentUser } from "../../redux/actions/authActions";

const Dashboard = () => {
  const [dashboardData, setDashboardData] = useState(null);
  const [loading, setLoading] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isAuthenticated = useSelector((state) => state.user.isAuthenticated);
  const role = useSelector((state) => state.user.user?.account?.role);
  const userState = useSelector((state) => state.user);
  const tutorProfile = useSelector((state) => state.user.user?.profile);

  // Debug logs
  console.log("Dashboard - isAuthenticated:", isAuthenticated);
  console.log("Dashboard - role:", role);
  console.log("Dashboard - userState:", userState);
  console.log("Dashboard - user.account:", userState.user?.account);

  // Fetch dashboard data based on user role
  const fetchDashboardData = useCallback(async () => {
    if (!isAuthenticated || !role) return;
    
    setLoading(true);
    try {
      console.log(`Fetching dashboard data for role: ${role}`);
      const response = await DashboardService.getDashboardData(role);
      console.log("Dashboard response:", response);
      
      if (response.success && response.data) {
        setDashboardData(response.data);
      } else {
        throw new Error("Invalid response format");
      }
    } catch (error) {
      console.error("Failed to fetch dashboard data:", error);
      // Fallback to mock data
      console.log("Using fallback mock data");
      switch (role) {
        case "learner":
          setDashboardData(DashboardService.getLearnerMockData());
          break;
        case "tutor":
          setDashboardData(DashboardService.getTutorMockData());
          break;
        case "admin":
          setDashboardData(DashboardService.getAdminMockData());
          break;
        default:
          break;
      }
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated, role]);

  useEffect(() => {
    AOS.init({ duration: 1000 });
  }, []);

  // Load current user info when component mounts
  useEffect(() => {
    if (isAuthenticated && !role) {
      dispatch(loadCurrentUser());
    }
  }, [isAuthenticated, role, dispatch]);

  useEffect(() => {
    fetchDashboardData();
  }, [isAuthenticated, role, fetchDashboardData]);

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isAuthenticated) {
      navigate("/signin");
    }
  }, [isAuthenticated, navigate]);

  if (!isAuthenticated) {
    return (
      <div className="dashboard-container">
        <div className="dashboard-loading">
          <p>ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p...</p>
        </div>
      </div>
    );
  }

  // Show loading or no role state
  if (!role) {
    return (
      <div className="dashboard-container">
        <div className="dashboard-loading">
          <p>ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>
          <p>Debug: isAuthenticated={String(isAuthenticated)}, role={String(role)}</p>
          <p>User account: {JSON.stringify(userState.user?.account)}</p>
          <button onClick={() => dispatch(loadCurrentUser())}>
            Th·ª≠ t·∫£i l·∫°i th√¥ng tin user
          </button>
          <button onClick={() => {
            // Force refresh the page
            window.location.reload();
          }}>
            Refresh trang
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard-container">
      {/* Tutor completeness banner */}
      {role === 'tutor' && (
        (() => {
          const missing = [];
          const subjects = tutorProfile?.subjects;
          const teachModes = tutorProfile?.teachModes;
          const rate = tutorProfile?.sessionRate;
          const city = tutorProfile?.city;
          if (!subjects || (Array.isArray(subjects) && subjects.length === 0)) missing.push('m√¥n d·∫°y');
          if (!teachModes || (Array.isArray(teachModes) && teachModes.length === 0)) missing.push('h√¨nh th·ª©c d·∫°y');
          if (!rate || Number(rate) <= 0) missing.push('h·ªçc ph√≠/bu·ªïi');
          if (!city) missing.push('th√†nh ph·ªë');
          if (missing.length === 0) return null;
          return (
            <div className="dashboard-alert" style={{
              margin: '16px auto', maxWidth: 1200, background: '#FFF4E5', border: '1px solid #FFD8A8', color: '#8B5E00',
              padding: '12px 16px', borderRadius: 8, display: 'flex', alignItems: 'center', justifyContent: 'space-between'
            }}>
              <div>
                <strong>Ho√†n thi·ªán h·ªì s∆° ƒë·ªÉ h·ªçc vi√™n c√≥ th·ªÉ t√¨m th·∫•y b·∫°n.</strong>
                <span> Thi·∫øu: {missing.join(', ')}.</span>
              </div>
              <button onClick={() => navigate('/tutor/onboarding')} style={{
                background: '#F59E0B', color: '#fff', border: 'none', borderRadius: 6, padding: '8px 12px', cursor: 'pointer'
              }}>B·ªï sung ngay</button>
            </div>
          );
        })()
      )}
      <section className="user-dashboard" data-aos="fade-up">
        {loading ? (
          <div className="dashboard-loading">
            <p>ƒêang t·∫£i d·ªØ li·ªáu dashboard...</p>
          </div>
        ) : (
          <>
            {role === "learner" && dashboardData && (
              <div className="dashboard-content" data-role="learner">
                <h2>Dashboard H·ªçc vi√™n</h2>
                <div className="dashboard-cards">
                  <div className="dashboard-card">
                    <h3>üìö Kh√≥a h·ªçc ƒëang h·ªçc</h3>
                    <p className="dashboard-number">
                      {dashboardData.activeCourses || 0}
                    </p>
                    <button onClick={() => navigate("/learner/courses")}>
                      Xem chi ti·∫øt
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>üìÖ L·ªãch h·ªçc tu·∫ßn n√†y</h3>
                    <p className="dashboard-number">
                      {dashboardData.weeklyLessons || 0}
                    </p>
                    <button onClick={() => navigate("/learner/schedule")}>
                      Xem l·ªãch h·ªçc
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>‚≠ê Gia s∆∞ y√™u th√≠ch</h3>
                    <p className="dashboard-number">
                      {dashboardData.favoriteTutors || 0}
                    </p>
                    <button
                      onClick={() => navigate("/learner/favorite-tutors")}
                    >
                      Xem danh s√°ch
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>üéØ M·ª•c ti√™u h·ªçc t·∫≠p</h3>
                    <p className="dashboard-number">
                      {dashboardData.learningProgress || 0}%
                    </p>
                    <button onClick={() => navigate("/learner/progress")}>
                      Xem ti·∫øn ƒë·ªô
                    </button>
                  </div>
                </div>
              </div>
            )}

            {role === "tutor" && dashboardData && (
              <div className="dashboard-content" data-role="tutor">
                <h2>Dashboard Gia s∆∞</h2>
                
                {/* Quick Stats Cards */}
                <div className="dashboard-cards">
                  <div className="dashboard-card">
                    <h3>üë• H·ªçc vi√™n hi·ªán t·∫°i</h3>
                    <p className="dashboard-number">
                      {dashboardData.currentStudents || 0}
                    </p>
                    <button onClick={() => navigate("/tutor/students")}>
                      Qu·∫£n l√Ω h·ªçc vi√™n
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>üí∞ Thu nh·∫≠p th√°ng n√†y</h3>
                    <p className="dashboard-number">
                      ‚Ç´{dashboardData.monthlyEarnings?.toLocaleString() || 0}
                    </p>
                    <button onClick={() => navigate("/tutor/earnings")}>
                      Xem b√°o c√°o
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>‚≠ê ƒê√°nh gi√° trung b√¨nh</h3>
                    <p className="dashboard-number">
                      {dashboardData.averageRating || 0}/5
                    </p>
                    <button onClick={() => navigate("/tutor/reviews")}>
                      Xem ƒë√°nh gi√°
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>üìÖ L·ªãch d·∫°y tu·∫ßn n√†y</h3>
                    <p className="dashboard-number">
                      {dashboardData.weeklyHours || 0} gi·ªù
                    </p>
                    <button onClick={() => navigate("/tutor/schedule")}>
                      Xem l·ªãch d·∫°y
                    </button>
                  </div>
                </div>

                {/* Detailed Widgets */}
                <div className="dashboard-widgets">
                  {/* Upcoming Lessons */}
                  <div className="widget upcoming-lessons">
                    <div className="widget-header">
                      <h3>üìÖ Bu·ªïi d·∫°y s·∫Øp t·ªõi</h3>
                      <button onClick={() => navigate("/tutor/schedule")} className="view-all-btn">
                        Xem t·∫•t c·∫£
                      </button>
                    </div>
                    <div className="widget-content">
                      {dashboardData.upcomingLessons && dashboardData.upcomingLessons.length > 0 ? (
                        <div className="lessons-list">
                          {dashboardData.upcomingLessons.slice(0, 3).map((lesson) => (
                            <div key={lesson.id} className="lesson-item">
                              <div className="lesson-info">
                                <div className="lesson-student">{lesson.studentName}</div>
                                <div className="lesson-subject">{lesson.subject}</div>
                                <div className="lesson-time">
                                  {lesson.date} - {lesson.time} ({lesson.duration} ph√∫t)
                                </div>
                              </div>
                              <div className={`lesson-status ${lesson.status}`}>
                                {lesson.status === 'confirmed' ? 'ƒê√£ x√°c nh·∫≠n' : 'Ch·ªù x√°c nh·∫≠n'}
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="no-data">Kh√¥ng c√≥ bu·ªïi d·∫°y n√†o s·∫Øp t·ªõi</div>
                      )}
                    </div>
                  </div>

                  {/* New Requests */}
                  <div className="widget new-requests">
                    <div className="widget-header">
                      <h3>üîî Y√™u c·∫ßu m·ªõi</h3>
                      <span className="badge">{dashboardData.newRequests?.length || 0}</span>
                    </div>
                    <div className="widget-content">
                      {dashboardData.newRequests && dashboardData.newRequests.length > 0 ? (
                        <div className="requests-list">
                          {dashboardData.newRequests.slice(0, 2).map((request) => (
                            <div key={request.id} className="request-item">
                              <div className="request-info">
                                <div className="request-student">{request.studentName}</div>
                                <div className="request-subject">{request.subject}</div>
                                <div className="request-message">{request.message}</div>
                                <div className="request-rate">‚Ç´{request.hourlyRate?.toLocaleString()}/gi·ªù</div>
                              </div>
                              <div className="request-actions">
                                <button className="btn-accept">Ch·∫•p nh·∫≠n</button>
                                <button className="btn-decline">T·ª´ ch·ªëi</button>
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="no-data">Kh√¥ng c√≥ y√™u c·∫ßu m·ªõi</div>
                      )}
                    </div>
                  </div>

                  {/* Weekly Earnings Chart */}
                  <div className="widget earnings-chart">
                    <div className="widget-header">
                      <h3>üìä Thu nh·∫≠p tu·∫ßn n√†y</h3>
                    </div>
                    <div className="widget-content">
                      <div className="chart-container">
                        {dashboardData.weeklyEarnings && dashboardData.weeklyEarnings.length > 0 ? (
                          <div className="simple-chart">
                            {dashboardData.weeklyEarnings.map((day, index) => {
                              const maxAmount = Math.max(...dashboardData.weeklyEarnings.map(d => d.amount));
                              const height = (day.amount / maxAmount) * 100;
                              return (
                                <div key={index} className="chart-bar">
                                  <div className="bar-value">‚Ç´{(day.amount / 1000).toFixed(0)}k</div>
                                  <div 
                                    className="bar" 
                                    style={{ height: `${height}%` }}
                                    title={`${day.day}: ‚Ç´${day.amount.toLocaleString()}`}
                                  ></div>
                                  <div className="bar-label">{day.day}</div>
                                </div>
                              );
                            })}
                          </div>
                        ) : (
                          <div className="no-data">Kh√¥ng c√≥ d·ªØ li·ªáu</div>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Quick Actions */}
                  <div className="widget quick-actions">
                    <div className="widget-header">
                      <h3>‚ö° Thao t√°c nhanh</h3>
                    </div>
                    <div className="widget-content">
                      <div className="action-buttons">
                        <button 
                          className="action-btn primary"
                          onClick={() => navigate("/tutor/publish")}
                        >
                          üìù ƒêƒÉng k√Ω d·∫°y h·ªçc
                        </button>
                        <button 
                          className="action-btn primary"
                          onClick={() => navigate("/tutor/schedule")}
                        >
                          üìÖ L·ªãch d·∫°y
                        </button>
                        <button 
                          className="action-btn secondary"
                          onClick={() => navigate("/tutor/students")}
                        >
                          üë• H·ªçc vi√™n
                        </button>
                        <button 
                          className="action-btn tertiary"
                          onClick={() => navigate("/tutor/earnings")}
                        >
                          üí∞ Thu nh·∫≠p
                        </button>
                        <button 
                          className="action-btn quaternary"
                          onClick={() => navigate("/tutor/profile")}
                        >
                          ‚öôÔ∏è H·ªì s∆°
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {role === "admin" && dashboardData && (
              <div className="dashboard-content" data-role="admin">
                <h2>Dashboard Qu·∫£n tr·ªã</h2>
                <div className="dashboard-cards">
                  <div className="dashboard-card">
                    <h3>üë§ T·ªïng ng∆∞·ªùi d√πng</h3>
                    <p className="dashboard-number">
                      {dashboardData.totalUsers?.toLocaleString() || 0}
                    </p>
                    <button onClick={() => navigate("/admin/users")}>
                      Qu·∫£n l√Ω ng∆∞·ªùi d√πng
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>üë®‚Äçüè´ Gia s∆∞ ho·∫°t ƒë·ªông</h3>
                    <p className="dashboard-number">
                      {dashboardData.activeTutors || 0}
                    </p>
                    <button onClick={() => navigate("/admin/tutors")}>
                      Qu·∫£n l√Ω gia s∆∞
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>üí∞ Doanh thu th√°ng</h3>
                    <p className="dashboard-number">
                      ‚Ç´{dashboardData.monthlyRevenue?.toLocaleString() || 0}
                    </p>
                    <button onClick={() => navigate("/admin/revenue")}>
                      Xem b√°o c√°o
                    </button>
                  </div>
                  <div className="dashboard-card">
                    <h3>üéØ Kh√≥a h·ªçc ƒëang ho·∫°t ƒë·ªông</h3>
                    <p className="dashboard-number">
                      {dashboardData.activeCourses || 0}
                    </p>
                    <button onClick={() => navigate("/admin/courses")}>
                      Qu·∫£n l√Ω kh√≥a h·ªçc
                    </button>
                  </div>
                </div>
              </div>
            )}
          </>
        )}
      </section>
    </div>
  );
};

export default Dashboard;