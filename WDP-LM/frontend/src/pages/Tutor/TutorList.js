import React, { useState, useEffect, useMemo } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";
import BackHomeButton from "../../components/Common/BackHomeButton";
import TutorService from "../../services/TutorService";
import "./TutorList.scss";

const TutorList = () => {
  const navigate = useNavigate();
  const userState = useSelector((state) => state.user);
  const isAuthenticated = userState?.isAuthenticated;
  const userRole = userState?.user?.role || userState?.account?.role;

  // States
  const [tutors, setTutors] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [query, setQuery] = useState("");
  const [subject, setSubject] = useState("");
  const [grade, setGrade] = useState("");
  const [location, setLocation] = useState("");
  const [mode, setMode] = useState("");
  const [minPrice, setMinPrice] = useState("");
  const [maxPrice, setMaxPrice] = useState("");
  const [minRating, setMinRating] = useState("");
  const [experience, setExperience] = useState("");
  const [page, setPage] = useState(1);
  const [sortBy, setSortBy] = useState("rating");

  const pageSize = 12;

  // Load tutors data
  useEffect(() => {
    const loadTutors = async () => {
      setLoading(true);
      setError("");
      try {
        console.log("üîç Loading tutors with filters:", {
          search: query,
          subject,
          grade,
          location,
          mode,
          minPrice,
          maxPrice,
          minRating,
          experience,
          page,
          sortBy
        });

        const data = await TutorService.searchTutors({
          search: query,
          subject,
          grade,
          location,
          mode,
          minPrice: minPrice ? Number(minPrice) : undefined,
          maxPrice: maxPrice ? Number(maxPrice) : undefined,
          minRating: minRating ? Number(minRating) : undefined,
          experience,
          page,
          limit: pageSize,
          sortBy,
          includePending: false // Ch·ªâ hi·ªÉn th·ªã gia s∆∞ ƒë√£ duy·ªát
        });

        console.log("üìä Tutors loaded:", data);
        // Map API response to component expected format
        const tutors = (data?.tutors || []).map(tutor => ({
          _id: tutor.id,
          user: {
            full_name: tutor.name || tutor.userId || "Gia s∆∞"
          },
          avatarUrl: tutor.avatar,
          subjects: tutor.subjects || [],
          location: tutor.location || "Ch∆∞a c·∫≠p nh·∫≠t",
          rating: tutor.rating || 0,
          reviewCount: tutor.reviewCount || 0,
          experience: tutor.experience || "0 nƒÉm",
          sessionRate: tutor.price || 0,
          bio: tutor.bio || "Ch∆∞a c√≥ gi·ªõi thi·ªáu",
          verified: tutor.verified || false
        }));
        setTutors(tutors);
      } catch (e) {
        console.error("‚ùå Error loading tutors:", e);
        setError(`Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch gia s∆∞: ${e.message}`);
      } finally {
        setLoading(false);
      }
    };

    loadTutors();
  }, [query, subject, grade, location, mode, minPrice, maxPrice, minRating, experience, page, sortBy]);

  // Filter handlers
  const handleClearFilters = () => {
    setQuery("");
    setSubject("");
    setGrade("");
    setLocation("");
    setMode("");
    setMinPrice("");
    setMaxPrice("");
    setMinRating("");
    setExperience("");
    setPage(1);
  };

  const handleTutorClick = (tutorId) => {
    navigate(`/tutor/${tutorId}`);
  };

  return (
    <div className="tutor-list-container">
      <div className="tutor-list-header">
        <BackHomeButton />
        <div className="header-content">
          <h1>Danh s√°ch gia s∆∞</h1>
          <p>T√¨m ki·∫øm v√† l·ª±a ch·ªçn gia s∆∞ ph√π h·ª£p v·ªõi nhu c·∫ßu h·ªçc t·∫≠p c·ªßa b·∫°n</p>
        </div>
      </div>

      {/* Filters Section */}
      <div className="filters-section">
        <div className="filters-grid">
          {/* Search */}
          <div className="filter-group">
            <label>T√¨m ki·∫øm</label>
            <input
              type="text"
              placeholder="T√™n gia s∆∞, m√¥n h·ªçc..."
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              className="filter-input"
            />
          </div>

          {/* Subject */}
          <div className="filter-group">
            <label>M√¥n h·ªçc</label>
            <select
              value={subject}
              onChange={(e) => setSubject(e.target.value)}
              className="filter-select"
            >
              <option value="">T·∫•t c·∫£ m√¥n</option>
              <option value="to√°n">To√°n</option>
              <option value="l√Ω">L√Ω</option>
              <option value="h√≥a">H√≥a</option>
              <option value="sinh">Sinh</option>
              <option value="vƒÉn">VƒÉn</option>
              <option value="anh">Ti·∫øng Anh</option>
              <option value="s·ª≠">L·ªãch s·ª≠</option>
              <option value="ƒë·ªãa">ƒê·ªãa l√Ω</option>
            </select>
          </div>

          {/* Grade */}
          <div className="filter-group">
            <label>L·ªõp</label>
            <select
              value={grade}
              onChange={(e) => setGrade(e.target.value)}
              className="filter-select"
            >
              <option value="">T·∫•t c·∫£ l·ªõp</option>
              <option value="1">L·ªõp 1</option>
              <option value="2">L·ªõp 2</option>
              <option value="3">L·ªõp 3</option>
              <option value="4">L·ªõp 4</option>
              <option value="5">L·ªõp 5</option>
              <option value="6">L·ªõp 6</option>
              <option value="7">L·ªõp 7</option>
              <option value="8">L·ªõp 8</option>
              <option value="9">L·ªõp 9</option>
              <option value="10">L·ªõp 10</option>
              <option value="11">L·ªõp 11</option>
              <option value="12">L·ªõp 12</option>
            </select>
          </div>

          {/* Mode */}
          <div className="filter-group">
            <label>H√¨nh th·ª©c</label>
            <select
              value={mode}
              onChange={(e) => setMode(e.target.value)}
              className="filter-select"
            >
              <option value="">T·∫•t c·∫£</option>
              <option value="online">Tr·ª±c tuy·∫øn</option>
              <option value="offline">T·∫°i nh√†</option>
            </select>
          </div>
        </div>

        {/* Advanced Filters */}
        <div className="advanced-filters">
          <div className="filter-row">
            <div className="filter-group">
              <label>ƒê·ªãa ƒëi·ªÉm</label>
              <input
                type="text"
                placeholder="H√† N·ªôi, TP.HCM..."
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                className="filter-input"
              />
            </div>

            <div className="filter-group">
              <label>Gi√° t·ªëi thi·ªÉu (VNƒê)</label>
              <input
                type="number"
                placeholder="0"
                value={minPrice}
                onChange={(e) => setMinPrice(e.target.value)}
                className="filter-input"
              />
            </div>

            <div className="filter-group">
              <label>Gi√° t·ªëi ƒëa (VNƒê)</label>
              <input
                type="number"
                placeholder="1000000"
                value={maxPrice}
                onChange={(e) => setMaxPrice(e.target.value)}
                className="filter-input"
              />
            </div>

            <div className="filter-group">
              <label>ƒê√°nh gi√° t·ªëi thi·ªÉu</label>
              <select
                value={minRating}
                onChange={(e) => setMinRating(e.target.value)}
                className="filter-select"
              >
                <option value="">T·∫•t c·∫£</option>
                <option value="4">4+ sao</option>
                <option value="3">3+ sao</option>
                <option value="2">2+ sao</option>
                <option value="1">1+ sao</option>
              </select>
            </div>

            <div className="filter-group">
              <label>S·∫Øp x·∫øp</label>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="filter-select"
              >
                <option value="rating">ƒê√°nh gi√° cao</option>
                <option value="price">Gi√° th·∫•p</option>
                <option value="experience">Kinh nghi·ªám</option>
                <option value="created">M·ªõi nh·∫•t</option>
              </select>
            </div>
          </div>
        </div>

        {/* Filter Actions */}
        <div className="filter-actions">
          <button
            onClick={handleClearFilters}
            className="clear-filters-btn"
          >
            <i className="fas fa-times"></i>
            X√≥a b·ªô l·ªçc
          </button>
        </div>
      </div>

      {/* Results Summary */}
      <div className="results-summary">
        <p>
          T√¨m th·∫•y <strong>{tutors.length}</strong> gia s∆∞ ph√π h·ª£p
        </p>
      </div>

      {/* Loading State */}
      {loading && (
        <div className="loading-state">
          <div className="loading-spinner">
            <div className="spinner"></div>
          </div>
          <p>ƒêang t·∫£i danh s√°ch gia s∆∞...</p>
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="error-state">
          <div className="error-icon">
            <i className="fas fa-exclamation-triangle"></i>
          </div>
          <h3>Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu</h3>
          <p>{error}</p>
          <div className="debug-info">
            <p>üîç Debug Info:</p>
            <p>‚Ä¢ API Base URL: {process.env.REACT_APP_API_URL || "http://localhost:5000/api/v1"}</p>
            <p>‚Ä¢ Tutors loaded: {tutors.length}</p>
            <p>‚Ä¢ Current filters: {JSON.stringify({ query, subject, grade, location, mode })}</p>
          </div>
          <button
            className="retry-button"
            onClick={() => window.location.reload()}
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      )}

      {/* Empty State */}
      {!loading && !error && tutors.length === 0 && (
        <div className="empty-state">
          <div className="empty-icon">
            <i className="fas fa-user-graduate"></i>
          </div>
          <h3>Kh√¥ng t√¨m th·∫•y gia s∆∞</h3>
          <p>Th·ª≠ ƒëi·ªÅu ch·ªânh b·ªô l·ªçc ƒë·ªÉ t√¨m ki·∫øm k·∫øt qu·∫£ kh√°c</p>
          <button onClick={handleClearFilters} className="clear-filters-btn">
            X√≥a b·ªô l·ªçc
          </button>
        </div>
      )}

      {/* Tutors Grid */}
      {!loading && !error && tutors.length > 0 && (
        <div className="tutors-grid">
          {tutors.map((tutor) => (
            <div
              key={tutor._id}
              className="tutor-card"
              onClick={() => handleTutorClick(tutor._id)}
            >
              <div className="tutor-avatar">
                <img
                  src={tutor.avatarUrl || "/default-avatar.png"}
                  alt={tutor.user?.full_name || "Gia s∆∞"}
                  onError={(e) => {
                    e.target.src = "/default-avatar.png";
                  }}
                />
                <div className="online-status">
                  <span className="status-dot"></span>
                </div>
              </div>

              <div className="tutor-info">
                <h3 className="tutor-name">
                  {tutor.user?.full_name || "Gia s∆∞"}
                </h3>
                <p className="tutor-subjects">
                  {tutor.subjects?.slice(0, 3).map(s => s.name || s.subject || s).join(", ")}
                  {tutor.subjects?.length > 3 && "..."}
                </p>
                <div className="tutor-rating">
                  <div className="stars">
                    {[...Array(5)].map((_, i) => (
                      <i
                        key={i}
                        className={`fas fa-star ${
                          i < (tutor.rating || 0) ? "active" : ""
                        }`}
                      ></i>
                    ))}
                  </div>
                  <span className="rating-text">
                    {tutor.rating?.toFixed(1) || "0.0"} ({tutor.reviewCount || 0} ƒë√°nh gi√°)
                  </span>
                </div>
                <div className="tutor-meta">
                  <div className="meta-item">
                    <i className="fas fa-graduation-cap"></i>
                    <span>{tutor.experience || 0} nƒÉm kinh nghi·ªám</span>
                  </div>
                  <div className="meta-item">
                    <i className="fas fa-map-marker-alt"></i>
                    <span>{tutor.location || "Kh√¥ng x√°c ƒë·ªãnh"}</span>
                  </div>
                </div>
                <div className="tutor-price">
                  <span className="price-label">T·ª´</span>
                  <span className="price-value">
                    {tutor.sessionRate ? `${tutor.sessionRate.toLocaleString()}ƒë/bu·ªïi` : "Li√™n h·ªá"}
                  </span>
                </div>
              </div>

              <div className="tutor-actions">
                <button className="btn btn-primary">
                  Xem h·ªì s∆°
                </button>
                {isAuthenticated ? (
                  <button className="btn btn-outline">
                    Li√™n h·ªá
                  </button>
                ) : (
                  <Link to="/signin" className="btn btn-outline">
                    ƒêƒÉng nh·∫≠p
                  </Link>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Pagination */}
      {!loading && !error && tutors.length > 0 && (
        <div className="pagination">
          <button
            onClick={() => setPage(Math.max(1, page - 1))}
            disabled={page === 1}
            className="pagination-btn"
          >
            <i className="fas fa-chevron-left"></i>
            Tr∆∞·ªõc
          </button>
          
          <div className="pagination-info">
            Trang {page} - {tutors.length} gia s∆∞
          </div>
          
          <button
            onClick={() => setPage(page + 1)}
            disabled={tutors.length < pageSize}
            className="pagination-btn"
          >
            Sau
            <i className="fas fa-chevron-right"></i>
          </button>
        </div>
      )}
    </div>
  );
};

export default TutorList;
