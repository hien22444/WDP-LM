import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Cookies from 'js-cookie';
import './Wallet.scss';

const API_BASE_URL = process.env.REACT_APP_API_URL || "http://localhost:5000/api/v1";

const Wallet = () => {
  const [earnings, setEarnings] = useState({
    totalEarnings: 0,
    availableBalance: 0,
    pendingBalance: 0
  });
  const [bankAccount, setBankAccount] = useState(null);
  const [withdrawals, setWithdrawals] = useState([]);
  const [loading, setLoading] = useState(false);
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [showWithdrawForm, setShowWithdrawForm] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    loadWallet();
    loadWithdrawals();
  }, []);

  const loadWallet = async () => {
    try {
      const token = Cookies.get('accessToken');
      const response = await axios.get(`${API_BASE_URL}/wallet/balance`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      setEarnings(response.data.earnings || earnings);
      setBankAccount(response.data.bankAccount);
    } catch (error) {
      console.error('Error loading wallet:', error);
    }
  };

  const loadWithdrawals = async () => {
    try {
      const token = Cookies.get('accessToken');
      const response = await axios.get(`${API_BASE_URL}/wallet/withdrawals`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      setWithdrawals(response.data.withdrawals || []);
    } catch (error) {
      console.error('Error loading withdrawals:', error);
    }
  };

  const handleUpdateBankAccount = () => {
    navigate('/tutor/settings');
  };

  const handleWithdraw = async () => {
    if (!withdrawAmount || isNaN(withdrawAmount) || withdrawAmount < 50000) {
      alert('S·ªë ti·ªÅn t·ªëi thi·ªÉu: 50,000 VNƒê');
      return;
    }

    if (parseInt(withdrawAmount) > earnings.availableBalance) {
      alert(`Kh√¥ng ƒë·ªß s·ªë d∆∞. S·ªë d∆∞ hi·ªán t·∫°i: ${earnings.availableBalance.toLocaleString('vi-VN')} VNƒê`);
      return;
    }

    if (!bankAccount) {
      alert('Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng tr∆∞·ªõc');
      return;
    }

    setLoading(true);
    try {
      const token = Cookies.get('accessToken');
      await axios.post(
        `${API_BASE_URL}/wallet/withdraw`,
        { amount: parseInt(withdrawAmount) },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      alert('Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i! Admin s·∫Ω x·ª≠ l√Ω trong 1-2 ng√†y l√†m vi·ªác.');
      setWithdrawAmount('');
      setShowWithdrawForm(false);
      loadWallet();
      loadWithdrawals();
    } catch (error) {
      alert(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra');
      console.error('Withdraw error:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadge = (status) => {
    const badges = {
      pending: 'badge-warning',
      processing: 'badge-info',
      completed: 'badge-success',
      failed: 'badge-danger',
      cancelled: 'badge-secondary'
    };
    
    const labels = {
      pending: 'Ch·ªù x·ª≠ l√Ω',
      processing: 'ƒêang x·ª≠ l√Ω',
      completed: 'Ho√†n th√†nh',
      failed: 'Th·∫•t b·∫°i',
      cancelled: 'ƒê√£ h·ªßy'
    };

    return (
      <span className={`badge ${badges[status] || 'badge-secondary'}`}>
        {labels[status] || status}
      </span>
    );
  };

  return (
    <div className="wallet-page">
      <div className="wallet-header">
        <h1>üí∞ V√≠ c·ªßa t√¥i</h1>
      </div>

      {/* Balance Cards */}
      <div className="balance-cards">
        <div className="balance-card primary">
          <div className="label">S·ªë d∆∞ kh·∫£ d·ª•ng</div>
          <div className="amount">{earnings.availableBalance.toLocaleString('vi-VN')} VNƒê</div>
          <button 
            className="btn-withdraw"
            onClick={() => setShowWithdrawForm(!showWithdrawForm)}
          >
            R√∫t ti·ªÅn ngay
          </button>
        </div>

        <div className="balance-card secondary">
          <div className="label">‚è≥ ƒêang ch·ªù</div>
          <div className="amount">{earnings.pendingBalance.toLocaleString('vi-VN')} VNƒê</div>
          <small>Ti·ªÅn ƒëang gi·ªØ trong escrow</small>
        </div>

        <div className="balance-card info">
          <div className="label">T·ªïng thu nh·∫≠p</div>
          <div className="amount">{earnings.totalEarnings.toLocaleString('vi-VN')} VNƒê</div>
          <small>To√†n b·ªô ti·ªÅn ƒë√£ nh·∫≠n</small>
        </div>
      </div>

      {/* Bank Account Info */}
      <div className="bank-account-section">
        {!bankAccount ? (
          <div className="no-bank-alert">
            <p>‚ö†Ô∏è B·∫°n ch∆∞a c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng</p>
            <button className="btn-update" onClick={handleUpdateBankAccount}>
              C·∫≠p nh·∫≠t ngay
            </button>
          </div>
        ) : (
          <div className="bank-info">
            <h3>Th√¥ng tin t√†i kho·∫£n nh·∫≠n ti·ªÅn</h3>
            <div className="bank-details">
              <div className="detail-item">
                <span className="label">Ng√¢n h√†ng:</span>
                <span className="value">{bankAccount.bankName || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
              </div>
              <div className="detail-item">
                <span className="label">S·ªë t√†i kho·∫£n:</span>
                <span className="value">{bankAccount.accountNumber ? `****${bankAccount.accountNumber.slice(-4)}` : 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
              </div>
              <div className="detail-item">
                <span className="label">Ch·ªß t√†i kho·∫£n:</span>
                <span className="value">{bankAccount.accountName || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
              </div>
            </div>
            <button className="btn-update" onClick={handleUpdateBankAccount}>
              C·∫≠p nh·∫≠t
            </button>
          </div>
        )}
      </div>

      {/* Withdraw Form */}
      {showWithdrawForm && (
        <div className="withdraw-form-section">
          <h3>R√∫t ti·ªÅn</h3>
          <div className="form-group">
            <label>S·ªë ti·ªÅn mu·ªën r√∫t (VNƒê)</label>
            <input
              type="number"
              value={withdrawAmount}
              onChange={(e) => setWithdrawAmount(e.target.value)}
              placeholder="T·ªëi thi·ªÉu 50,000 VNƒê"
              min="50000"
            />
            <small>S·ªë d∆∞ hi·ªán t·∫°i: {earnings.availableBalance.toLocaleString('vi-VN')} VNƒê</small>
          </div>
          <div className="form-actions">
            <button 
              className="btn-confirm" 
              onClick={handleWithdraw}
              disabled={loading}
            >
              {loading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n r√∫t ti·ªÅn'}
            </button>
            <button 
              className="btn-cancel" 
              onClick={() => setShowWithdrawForm(false)}
              disabled={loading}
            >
              H·ªßy
            </button>
          </div>
        </div>
      )}

      {/* Withdrawal History */}
      <div className="withdrawal-history">
        <h2>L·ªãch s·ª≠ r√∫t ti·ªÅn</h2>
        {withdrawals.length === 0 ? (
          <p className="empty-state">Ch∆∞a c√≥ y√™u c·∫ßu r√∫t ti·ªÅn n√†o</p>
        ) : (
          <table className="withdrawals-table">
            <thead>
              <tr>
                <th>Ng√†y</th>
                <th>S·ªë ti·ªÅn</th>
                <th>Tr·∫°ng th√°i</th>
              </tr>
            </thead>
            <tbody>
              {withdrawals.map(w => (
                <tr key={w._id}>
                  <td>{new Date(w.createdAt).toLocaleDateString('vi-VN')}</td>
                  <td>{w.amount.toLocaleString('vi-VN')} VNƒê</td>
                  <td>{getStatusBadge(w.status)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default Wallet;

