import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from 'react-toastify';
import { submitTutorProfile, uploadIdDocuments, uploadDegreeDocuments } from '../../services/TutorService';
import UniversalHeader from '../../components/Layout/UniversalHeader';
import "./OnboardingWizard.scss";

const OnboardingWizard = () => {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // Education info
    education: '',
    major: '',
    university: '',
    graduationYear: '',
    
    // Teaching info
    subjects: [],
    experience: '',
    hourlyRate: '',
    
    // Documents
    identityFront: null,
    identityBack: null,
    educationDocument: null,
    certificateDocument: null,
    
    // Additional fields for verification
    educationType: '',
    certificateName: '',
    certificateType: '',
    
    // Additional info (Step 4)
    introduction: '',
    teachingGoals: '',
    strengths: ''
  });

  const steps = [
    { id: 1, title: 'X√°c minh danh t√≠nh', description: 'CCCD/CMND/H·ªô chi·∫øu (quan tr·ªçng nh·∫•t)' },
    { id: 2, title: 'Tr√¨nh ƒë·ªô h·ªçc v·∫•n', description: 'B·∫±ng c·∫•p ch√≠nh th·ª©c' },
    { id: 3, title: 'Kinh nghi·ªám gi·∫£ng d·∫°y', description: 'M√¥n d·∫°y v√† ph∆∞∆°ng ph√°p' },
    { id: 4, title: 'Th√¥ng tin b·ªï sung', description: 'Gi·ªõi thi·ªáu v√† m·ª•c ti√™u' },
    { id: 5, title: 'Ch·ª©ng ch·ªâ & th√†nh t√≠ch', description: 'IELTS, TOEIC, gi·∫£i th∆∞·ªüng... (t√πy ch·ªçn)' }
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleFileChange = (field, file) => {
    setFormData(prev => ({
      ...prev,
      [field]: file
    }));
  };

  const handleNext = () => {
    if (currentStep < 5) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const formatBytes = (bytes) => {
    if (!bytes && bytes !== 0) return '';
    const sizes = ['B', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;
  };

  const removeSelectedFile = (field) => {
    setFormData((prev) => ({ ...prev, [field]: null }));
  };

  const handleSubmit = async () => {
    try {
      console.log('Form submitted:', formData);
      
      // 1. Upload identity documents if available
      if (formData.identityFront || formData.identityBack) {
        const identityFiles = [];
        if (formData.identityFront) identityFiles.push(formData.identityFront);
        if (formData.identityBack) identityFiles.push(formData.identityBack);
        
        await uploadIdDocuments(identityFiles);
        toast.success("‚úÖ ƒê√£ t·∫£i l√™n gi·∫•y t·ªù t√πy th√¢n");
      }
      
      // 2. Upload education documents if available
      if (formData.educationDocument) {
        await uploadDegreeDocuments([formData.educationDocument]);
        toast.success("‚úÖ ƒê√£ t·∫£i l√™n t√†i li·ªáu h·ªçc v·∫•n");
      }
      
      // 3. Submit tutor profile to backend
      const result = await submitTutorProfile();
      
      // 4. Show success message
      toast.success("üéâ ƒêƒÉng k√Ω gia s∆∞ th√†nh c√¥ng! H·ªì s∆° c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c xem x√©t.");
      
      // 5. Redirect to profile page
      navigate('/profile');
      
    } catch (error) {
      console.error('Error submitting tutor profile:', error);
      const errorMessage = error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω gia s∆∞";
      toast.error(`‚ùå ${errorMessage}`);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="step-content">
            <h3>X√°c minh Danh t√≠nh</h3>
            <p>T·∫£i l√™n ·∫£nh ch·ª•p r√µ n√©t hai m·∫∑t CƒÉn c∆∞·ªõc c√¥ng d√¢n (CCCD), ho·∫∑c gi·∫•y t·ªù t√πy th√¢n h·ª£p l·ªá (CMND, h·ªô chi·∫øu, b·∫±ng l√°i xe).</p>
            
            <div className="verification-info">
              <div className="info-section">
                <h4>üéØ M·ª•c ƒë√≠ch:</h4>
                <ul>
                  <li>X√°c minh ng∆∞·ªùi ƒëƒÉng k√Ω l√† th·∫≠t v√† ch·ªãu tr√°ch nhi·ªám ph√°p l√Ω</li>
                  <li>NgƒÉn ch·∫∑n gian l·∫≠n (ƒëƒÉng k√Ω gi·∫£ danh, m·∫°o danh sinh vi√™n/tr∆∞·ªùng)</li>
                  <li>TƒÉng ƒë·ªô tin c·∫≠y cho h·ªçc vi√™n v√† ph·ª• huynh khi xem h·ªì s∆°</li>
                </ul>
        </div>
              
              <div className="info-section">
                <h4>üîí H·ªá th·ªëng x·ª≠ l√Ω:</h4>
                <ul>
                  <li>T·ª± ƒë·ªông l√†m m·ªù s·ªë CCCD khi hi·ªÉn th·ªã c√¥ng khai</li>
                  <li>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x√°c th·ª±c</li>
                  <li>N·∫øu ·∫£nh kh√¥ng r√µ ho·∫∑c sai th√¥ng tin ‚Üí t·ª± ƒë·ªông b√°o l·ªói, y√™u c·∫ßu t·∫£i l·∫°i</li>
                </ul>
        </div>
      </div>

            <div className="form-group">
              <label>·∫¢nh m·∫∑t tr∆∞·ªõc CCCD/CMND/H·ªô chi·∫øu *</label>
              <div className="file-upload-area">
                <input type="file" accept="image/*" onChange={(e) => handleFileChange('identityFront', e.target.files[0])} />
                <div className="upload-placeholder">
                  <div className="upload-icon">üìÑ</div>
                  <p>K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn</p>
                </div>
              </div>
              {formData.identityFront && (
                <div className="file-preview">
                  <div className="preview-image">
                    <img src={URL.createObjectURL(formData.identityFront)} alt="·∫¢nh m·∫∑t tr∆∞·ªõc" />
                  </div>
                  <div className="file-info">
                    <div className="file-name">{formData.identityFront.name}</div>
                    <div className="file-size">{formatBytes(formData.identityFront.size)}</div>
                    <button type="button" className="remove-btn" onClick={() => removeSelectedFile('identityFront')}>X√≥a</button>
                  </div>
        </div>
      )}
            </div>

              <div className="form-group">
              <label>·∫¢nh m·∫∑t sau CCCD/CMND *</label>
              <div className="file-upload-area">
                <input type="file" accept="image/*" onChange={(e) => handleFileChange('identityBack', e.target.files[0])} />
                <div className="upload-placeholder">
                  <div className="upload-icon">üìÑ</div>
                  <p>K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn</p>
                </div>
              </div>
              {formData.identityBack && (
                <div className="file-preview">
                  <div className="preview-image">
                    <img src={URL.createObjectURL(formData.identityBack)} alt="·∫¢nh m·∫∑t sau" />
                  </div>
                  <div className="file-info">
                    <div className="file-name">{formData.identityBack.name}</div>
                    <div className="file-size">{formatBytes(formData.identityBack.size)}</div>
                    <button type="button" className="remove-btn" onClick={() => removeSelectedFile('identityBack')}>X√≥a</button>
              </div>
                </div>
              )}
            </div>

            <div className="requirements">
              <h4>‚ö†Ô∏è Y√™u c·∫ßu b·∫Øt bu·ªôc:</h4>
              <ul>
                <li>·∫¢nh ph·∫£i r√µ m·∫∑t ch·ªØ, kh√¥ng m·ªù, kh√¥ng che khu·∫•t</li>
                <li>Tr√πng v·ªõi th√¥ng tin c√° nh√¢n ƒë√£ khai trong h·ªì s∆°</li>
                <li>ƒê·ªãnh d·∫°ng: JPG, PNG (t·ªëi ƒëa 5MB)</li>
                <li>Ch·∫•p nh·∫≠n: CCCD, CMND, H·ªô chi·∫øu, B·∫±ng l√°i xe</li>
              </ul>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="step-content">
            <h3>Tr√¨nh ƒë·ªô h·ªçc v·∫•n</h3>
            <p>Th√¥ng tin v·ªÅ b·∫±ng c·∫•p v√† chuy√™n m√¥n c·ªßa b·∫°n.</p>

              <div className="form-group">
              <label>Tr√¨nh ƒë·ªô h·ªçc v·∫•n cao nh·∫•t</label>
              <select value={formData.education} onChange={(e) => handleInputChange('education', e.target.value)}>
                  <option value="">--</option>
                <option value="high_school">THPT</option>
                <option value="college">Cao ƒë·∫≥ng</option>
                <option value="university">ƒê·∫°i h·ªçc</option>
                <option value="master">Th·∫°c sƒ©</option>
                <option value="phd">Ti·∫øn sƒ©</option>
                </select>
              </div>

            <div className="form-row">
              <div className="form-group">
                <label>Chuy√™n ng√†nh</label>
                <input
                  type="text"
                  value={formData.major}
                  onChange={(e) => handleInputChange('major', e.target.value)}
                  placeholder="C√¥ng ngh·ªá th√¥ng tin, To√°n h·ªçc..."
                />
              </div>
              <div className="form-group">
                <label>Tr∆∞·ªùng/ƒê·∫°i h·ªçc</label>
                <input
                  type="text"
                  value={formData.university}
                  onChange={(e) => handleInputChange('university', e.target.value)}
                  placeholder="ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi..."
                />
              </div>
            </div>

              <div className="form-group">
              <label>NƒÉm t·ªët nghi·ªáp</label>
                <input
                type="number"
                value={formData.graduationYear}
                onChange={(e) => handleInputChange('graduationYear', e.target.value)}
                placeholder="2024"
                min="1990"
                max="2030"
                />
              </div>

            <div className="verification-info">
              <div className="info-section">
                <h4>üéØ M·ª•c ƒë√≠ch:</h4>
                <ul>
                  <li>ƒê·∫£m b·∫£o gia s∆∞ c√≥ n·ªÅn t·∫£ng ki·∫øn th·ª©c ƒë√∫ng chuy√™n ng√†nh</li>
                  <li>Ph√¢n lo·∫°i gia s∆∞ (Sinh vi√™n ‚Äì Gi√°o vi√™n ‚Äì Ng∆∞·ªùi ƒëi l√†m)</li>
                  <li>H·ªó tr·ª£ ph·ª• huynh ch·ªçn gia s∆∞ ph√π h·ª£p tr√¨nh ƒë·ªô</li>
                </ul>
              </div>
              
              <div className="info-section">
                <h4>üîç H·ªá th·ªëng x·ª≠ l√Ω:</h4>
                <ul>
                  <li>D√≤ tr√πng t√™n tr∆∞·ªùng, ng√†nh h·ªçc, b·∫±ng c·∫•p ƒë·ªÉ ngƒÉn gi·∫£ m·∫°o</li>
                  <li>N·∫øu t√†i li·ªáu m·ªù, thi·∫øu th√¥ng tin ‚Üí h·ªá th·ªëng g·∫Øn c·ªù "C·∫ßn x√°c minh l·∫°i"</li>
                  <li>H·ªá th·ªëng c√≥ th·ªÉ y√™u c·∫ßu x√°c minh video ng·∫Øn (t√πy h·ªá th·ªëng n√¢ng cao)</li>
                </ul>
              </div>
              </div>

              <div className="form-group">
              <label>Lo·∫°i t√†i li·ªáu *</label>
              <select value={formData.educationType} onChange={(e) => handleInputChange('educationType', e.target.value)}>
                <option value="">-- Ch·ªçn lo·∫°i t√†i li·ªáu --</option>
                <option value="student_card">Th·∫ª sinh vi√™n + B·∫£ng ƒëi·ªÉm</option>
                <option value="diploma">B·∫±ng t·ªët nghi·ªáp ƒê·∫°i h·ªçc</option>
                <option value="master">B·∫±ng Th·∫°c sƒ©</option>
                <option value="phd">B·∫±ng Ti·∫øn sƒ©</option>
                <option value="teacher_card">Th·∫ª gi√°o vi√™n + B·∫±ng s∆∞ ph·∫°m</option>
              </select>
              </div>

              <div className="form-group">
              <label>T√†i li·ªáu ch·ª©ng minh *</label>
              <div className="file-upload-area">
                <input type="file" accept="image/*,.pdf" onChange={(e) => handleFileChange('educationDocument', e.target.files[0])} />
                <div className="upload-placeholder">
                  <div className="upload-icon">üéì</div>
                  <p>K√©o th·∫£ t√†i li·ªáu v√†o ƒë√¢y ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn</p>
                </div>
              </div>
              {formData.educationDocument && (
                <div className="file-preview">
                  <div className="preview-image">
                    <img src={URL.createObjectURL(formData.educationDocument)} alt="T√†i li·ªáu h·ªçc v·∫•n" />
                  </div>
                  <div className="file-info">
                    <div className="file-name">{formData.educationDocument.name}</div>
                    <div className="file-size">{formatBytes(formData.educationDocument.size)}</div>
                    <button type="button" className="remove-btn" onClick={() => removeSelectedFile('educationDocument')}>X√≥a</button>
                  </div>
                </div>
              )}
            </div>

            <div className="requirements">
              <h4>üìã Y√™u c·∫ßu theo nh√≥m ƒë·ªëi t∆∞·ª£ng:</h4>
              <div className="requirement-table">
                <div className="req-row">
                  <strong>Sinh vi√™n:</strong> Th·∫ª sinh vi√™n c√≤n h·∫°n + B·∫£ng ƒëi·ªÉm g·∫ßn nh·∫•t
                </div>
                <div className="req-row">
                  <strong>Ng∆∞·ªùi ƒë√£ t·ªët nghi·ªáp:</strong> B·∫±ng t·ªët nghi·ªáp ƒê·∫°i h·ªçc/Th·∫°c sƒ©/Ti·∫øn sƒ©
                </div>
                <div className="req-row">
                  <strong>Gi√°o vi√™n:</strong> Th·∫ª gi√°o vi√™n + B·∫±ng c·∫•p s∆∞ ph·∫°m
                </div>
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="step-content">
            <h3>Kinh nghi·ªám gi·∫£ng d·∫°y</h3>
            <p>Th√¥ng tin v·ªÅ m√¥n d·∫°y v√† ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y c·ªßa b·∫°n.</p>
            
            <div className="form-group">
              <label>M√¥n d·∫°y</label>
              <div className="checkbox-group">
                {['To√°n', 'L√Ω', 'H√≥a', 'Sinh', 'VƒÉn', 'Anh', 'L·ªãch s·ª≠', 'ƒê·ªãa l√Ω', 'Tin h·ªçc'].map(subject => (
                  <label key={subject} className="checkbox-item">
                    <input
                      type="checkbox"
                      checked={formData.subjects.includes(subject)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setFormData(prev => ({
                            ...prev,
                            subjects: [...prev.subjects, subject]
                          }));
                        } else {
                          setFormData(prev => ({
                            ...prev,
                            subjects: prev.subjects.filter(s => s !== subject)
                          }));
                        }
                      }}
                    />
                    <span className="checkmark"></span>
                    {subject}
                  </label>
                ))}
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>Kinh nghi·ªám (nƒÉm)</label>
                <input
                  type="number"
                  value={formData.experience}
                  onChange={(e) => handleInputChange('experience', e.target.value)}
                  placeholder="2"
                  min="0"
                />
              </div>
              <div className="form-group">
                <label>M·ª©c ph√≠ (VNƒê/gi·ªù)</label>
                <input
                  type="number"
                  value={formData.hourlyRate}
                  onChange={(e) => handleInputChange('hourlyRate', e.target.value)}
                  placeholder="200000"
                  min="50000"
                />
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="step-content">
            <h3>Th√¥ng tin b·ªï sung</h3>
            <p>Gi·ªõi thi·ªáu b·∫£n th√¢n v√† chia s·∫ª m·ª•c ti√™u gi·∫£ng d·∫°y c·ªßa b·∫°n.</p>
            
            <div className="form-group">
              <label>Gi·ªõi thi·ªáu b·∫£n th√¢n</label>
                <textarea
                value={formData.introduction}
                onChange={(e) => handleInputChange('introduction', e.target.value)}
                placeholder="Xin ch√†o! T√¥i l√† [T√™n], hi·ªán ƒëang l√† sinh vi√™n nƒÉm 3 ng√†nh C√¥ng ngh·ªá th√¥ng tin t·∫°i ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi..."
                  rows={4}
                />
              </div>

              <div className="form-group">
              <label>M·ª•c ti√™u gi·∫£ng d·∫°y</label>
              <textarea
                value={formData.teachingGoals}
                onChange={(e) => handleInputChange('teachingGoals', e.target.value)}
                placeholder="T√¥i mu·ªën gi√∫p h·ªçc sinh hi·ªÉu r√µ c√°c kh√°i ni·ªám to√°n h·ªçc, ph√°t tri·ªÉn t∆∞ duy logic v√† ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ h·ªçc t·∫≠p t·ªët..."
                rows={4}
                />
              </div>

              <div className="form-group">
              <label>ƒêi·ªÉm m·∫°nh c·ªßa b·∫°n</label>
              <textarea
                value={formData.strengths}
                onChange={(e) => handleInputChange('strengths', e.target.value)}
                placeholder="Ki√™n nh·∫´n, c√≥ kinh nghi·ªám gi·∫£i b√†i t·∫≠p kh√≥, bi·∫øt c√°ch truy·ªÅn ƒë·∫°t d·ªÖ hi·ªÉu..."
                rows={3}
              />
            </div>
          </div>
        );

      case 5:
        return (
          <div className="step-content">
            <h3>Ch·ª©ng ch·ªâ & Th√†nh t√≠ch Li√™n quan</h3>
            <p>T·∫£i l√™n c√°c ch·ª©ng ch·ªâ b·ªï tr·ª£ ho·∫∑c th√†nh t√≠ch h·ªçc thu·∫≠t (kh√¥ng b·∫Øt bu·ªôc).</p>
            
            <div className="verification-info">
              <div className="info-section">
                <h4>üéØ M·ª•c ƒë√≠ch:</h4>
                <ul>
                  <li>L√†m n·ªïi b·∫≠t h·ªì s∆° gia s∆∞ trong h·ªá th·ªëng g·ª£i √Ω l·ªõp h·ªçc</li>
                  <li>Cung c·∫•p th√¥ng tin ch√≠nh x√°c gi√∫p ph·ª• huynh d·ªÖ ch·ªçn gia s∆∞ uy t√≠n</li>
                  <li>TƒÉng ƒëi·ªÉm tin c·∫≠y (trust score) c·ªßa t√†i kho·∫£n</li>
                </ul>
              </div>

              <div className="info-section">
                <h4>üèÜ H·ªá th·ªëng x·ª≠ l√Ω:</h4>
                <ul>
                  <li>C√°c ch·ª©ng ch·ªâ ƒë∆∞·ª£c l∆∞u ·ªü tr·∫°ng th√°i "ƒë√£ x√°c minh" sau khi h·ªá th·ªëng ki·ªÉm tra</li>
                  <li>Nh·ªØng gia s∆∞ c√≥ ch·ª©ng ch·ªâ ƒë∆∞·ª£c hi·ªÉn th·ªã huy hi·ªáu "ƒê√£ x√°c minh h·ªçc v·∫•n / C√≥ ch·ª©ng ch·ªâ"</li>
                </ul>
              </div>
            </div>

            <div className="form-group">
              <label>T√™n ch·ª©ng ch·ªâ/Th√†nh t√≠ch</label>
                <input
                type="text"
                value={formData.certificateName}
                onChange={(e) => handleInputChange('certificateName', e.target.value)}
                placeholder="V√≠ d·ª•: IELTS 7.5, TOEIC 850, Gi·∫£i nh·∫•t Olympic To√°n..."
                />
              </div>

              <div className="form-group">
              <label>Lo·∫°i ch·ª©ng ch·ªâ</label>
              <select value={formData.certificateType} onChange={(e) => handleInputChange('certificateType', e.target.value)}>
                <option value="">-- Ch·ªçn lo·∫°i --</option>
                <option value="language">Ngo·∫°i ng·ªØ (IELTS, TOEIC, HSK, JLPT...)</option>
                <option value="academic">H·ªçc thu·∫≠t (Olympic, h·ªçc sinh gi·ªèi...)</option>
                <option value="professional">Chuy√™n m√¥n (MOS, IC3...)</option>
                <option value="achievement">Th√†nh t√≠ch kh√°c</option>
              </select>
              </div>

            <div className="form-group">
              <label>T√†i li·ªáu ch·ª©ng ch·ªâ</label>
              <div className="file-upload-area">
                <input type="file" accept="image/*,.pdf" onChange={(e) => handleFileChange('certificateDocument', e.target.files[0])} />
                <div className="upload-placeholder">
                  <div className="upload-icon">üèÜ</div>
                  <p>K√©o th·∫£ t√†i li·ªáu v√†o ƒë√¢y ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn</p>
                </div>
              </div>
          </div>

            <div className="note">
              <p><strong>üí° L∆∞u √Ω:</strong> B∆∞·ªõc n√†y l√† t√πy ch·ªçn. B·∫°n c√≥ th·ªÉ b·ªè qua n·∫øu kh√¥ng c√≥ ch·ª©ng ch·ªâ n√†o.</p>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="onboarding-wizard">
      <UniversalHeader />
      <div className="wizard-container">
        <div className="wizard-header">
          <h1>ƒêƒÉng k√Ω tr·ªü th√†nh gia s∆∞</h1>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${(currentStep / 5) * 100}%` }}></div>
          </div>
        </div>

        <div className="wizard-content">
          <div className="wizard-main">
            {renderStepContent()}

            <div className="wizard-actions">
              {currentStep > 1 && (
                <button className="btn-previous" onClick={handlePrevious}>
                  Quay l·∫°i
                </button>
              )}
              
              <div className="btn-group">
                {currentStep < 5 ? (
                  <button className="btn-next" onClick={handleNext}>
                    Ti·∫øp theo
                  </button>
                ) : (
                  <button className="btn-submit" onClick={handleSubmit}>
                    Ho√†n th√†nh ƒëƒÉng k√Ω
                  </button>
                    )}
                  </div>
            </div>
              </div>

          <div className="wizard-sidebar">
            <div className="steps-panel">
              <h3>Quy tr√¨nh ƒëƒÉng k√Ω</h3>
              <div className="steps-list">
                {steps.map((step, index) => (
                  <div key={step.id} className={`step-item ${currentStep === step.id ? 'active' : ''} ${currentStep > step.id ? 'completed' : ''}`}>
                    <div className="step-number">{step.id}</div>
                    <div className="step-info">
                      <div className="step-title">{step.title}</div>
                      <div className="step-description">{step.description}</div>
                    </div>
                      </div>
                    ))}
                  </div>
              </div>

            <div className="benefits-panel">
              <h4>L·ª£i √≠ch khi tr·ªü th√†nh gia s∆∞</h4>
              <ul>
                <li>‚úÖ Thu nh·∫≠p linh ho·∫°t</li>
                <li>‚úÖ L√†m vi·ªác t·ª´ xa</li>
                <li>‚úÖ Ph√°t tri·ªÉn k·ªπ nƒÉng gi·∫£ng d·∫°y</li>
                <li>‚úÖ H·ªó tr·ª£ h·ªçc sinh</li>
                <li>‚úÖ C·ªông ƒë·ªìng gia s∆∞ chuy√™n nghi·ªáp</li>
              </ul>
            </div>
          </div>
            </div>
      </div>
    </div>
  );
};

export default OnboardingWizard;