const axios = require('axios');

const API_URL = 'http://localhost:5000/api/v1';

// Test data
const testTutor = {
  email: 'tutor@test.com',
  password: 'password123',
  firstName: 'Gia s∆∞',
  lastName: 'Test'
};

const testStudent = {
  email: 'student@test.com', 
  password: 'password123',
  firstName: 'H·ªçc vi√™n',
  lastName: 'Test'
};

let tutorToken = '';
let studentToken = '';
let tutorProfileId = '';
let teachingSlotId = '';

async function testBookingFlow() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test lu·ªìng booking...\n');

    // 1. T·∫°o t√†i kho·∫£n tutor
    console.log('1. T·∫°o t√†i kho·∫£n tutor...');
    try {
      await axios.post(`${API_URL}/auth/register`, testTutor);
      console.log('‚úÖ T·∫°o t√†i kho·∫£n tutor th√†nh c√¥ng');
    } catch (error) {
      if (error.response?.status === 400 && error.response.data.message.includes('already exists')) {
        console.log('‚ÑπÔ∏è T√†i kho·∫£n tutor ƒë√£ t·ªìn t·∫°i');
      } else {
        throw error;
      }
    }

    // 2. T·∫°o t√†i kho·∫£n student
    console.log('2. T·∫°o t√†i kho·∫£n student...');
    try {
      await axios.post(`${API_URL}/auth/register`, testStudent);
      console.log('‚úÖ T·∫°o t√†i kho·∫£n student th√†nh c√¥ng');
    } catch (error) {
      if (error.response?.status === 400 && error.response.data.message.includes('already exists')) {
        console.log('‚ÑπÔ∏è T√†i kho·∫£n student ƒë√£ t·ªìn t·∫°i');
      } else {
        throw error;
      }
    }

    // 3. ƒêƒÉng nh·∫≠p tutor
    console.log('3. ƒêƒÉng nh·∫≠p tutor...');
    const tutorLogin = await axios.post(`${API_URL}/auth/login`, {
      email: testTutor.email,
      password: testTutor.password
    });
    tutorToken = tutorLogin.data.token;
    console.log('‚úÖ ƒêƒÉng nh·∫≠p tutor th√†nh c√¥ng');

    // 3.1. C·∫≠p nh·∫≠t role cho tutor
    console.log('3.1. C·∫≠p nh·∫≠t role cho tutor...');
    await axios.patch(`${API_URL}/dashboard/admin/user-role`, {
      userId: tutorLogin.data.user.id,
      newRole: 'tutor'
    }, {
      headers: { Authorization: `Bearer ${tutorToken}` }
    });
    console.log('‚úÖ C·∫≠p nh·∫≠t role tutor th√†nh c√¥ng');

    // 4. ƒêƒÉng nh·∫≠p student
    console.log('4. ƒêƒÉng nh·∫≠p student...');
    const studentLogin = await axios.post(`${API_URL}/auth/login`, {
      email: testStudent.email,
      password: testStudent.password
    });
    studentToken = studentLogin.data.token;
    console.log('‚úÖ ƒêƒÉng nh·∫≠p student th√†nh c√¥ng');

    // 5. T·∫°o tutor profile
    console.log('5. T·∫°o tutor profile...');
    try {
      const tutorProfile = await axios.post(`${API_URL}/tutor/profile`, {
        title: 'Gia s∆∞ To√°n h·ªçc',
        subjects: ['To√°n h·ªçc', 'V·∫≠t l√Ω'],
        teachModes: ['online', 'offline'],
        sessionRate: 200000,
        city: 'H√† N·ªôi',
        description: 'Gia s∆∞ c√≥ kinh nghi·ªám 5 nƒÉm d·∫°y To√°n'
      }, {
        headers: { Authorization: `Bearer ${tutorToken}` }
      });
      tutorProfileId = tutorProfile.data.profile._id;
      console.log('‚úÖ T·∫°o tutor profile th√†nh c√¥ng');
    } catch (error) {
      if (error.response?.status === 400 && error.response.data.message.includes('already exists')) {
        // L·∫•y profile hi·ªán c√≥
        const existingProfile = await axios.get(`${API_URL}/tutor/profile`, {
          headers: { Authorization: `Bearer ${tutorToken}` }
        });
        tutorProfileId = existingProfile.data.profile._id;
        console.log('‚ÑπÔ∏è Tutor profile ƒë√£ t·ªìn t·∫°i');
      } else {
        throw error;
      }
    }

    // 6. T·∫°o teaching slot
    console.log('6. T·∫°o teaching slot...');
    const slotData = {
      courseName: 'To√°n 12 - H√¨nh h·ªçc kh√¥ng gian',
      mode: 'online',
      price: 200000,
      capacity: 1,
      notes: 'Kh√≥a h·ªçc d√†nh cho h·ªçc sinh l·ªõp 12',
      recurringType: 'single',
      start: new Date(Date.now() + 24 * 60 * 60 * 1000), // Ng√†y mai
      end: new Date(Date.now() + 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000) // 2 ti·∫øng sau
    };

    const teachingSlot = await axios.post(`${API_URL}/bookings/slots`, slotData, {
      headers: { Authorization: `Bearer ${tutorToken}` }
    });
    teachingSlotId = teachingSlot.data.slot._id;
    console.log('‚úÖ T·∫°o teaching slot th√†nh c√¥ng');

    // 7. Student book kh√≥a h·ªçc
    console.log('7. Student book kh√≥a h·ªçc...');
    const bookingData = {
      slotId: teachingSlotId,
      notes: 'Em mu·ªën h·ªçc th√™m v·ªÅ h√¨nh h·ªçc kh√¥ng gian'
    };

    const booking = await axios.post(`${API_URL}/bookings/slots/${teachingSlotId}/book`, bookingData, {
      headers: { Authorization: `Bearer ${studentToken}` }
    });
    console.log('‚úÖ Student book kh√≥a h·ªçc th√†nh c√¥ng');

    // 8. Ki·ªÉm tra tutor c√≥ th·∫•y booking kh√¥ng
    console.log('8. Ki·ªÉm tra tutor c√≥ th·∫•y booking kh√¥ng...');
    const tutorBookings = await axios.get(`${API_URL}/bookings/me`, {
      headers: { Authorization: `Bearer ${tutorToken}` }
    });
    
    console.log('üìã Danh s√°ch booking c·ªßa tutor:');
    console.log(JSON.stringify(tutorBookings.data, null, 2));

    // 9. Ki·ªÉm tra teaching slots c·ªßa tutor
    console.log('9. Ki·ªÉm tra teaching slots c·ªßa tutor...');
    const tutorSlots = await axios.get(`${API_URL}/bookings/slots/me`, {
      headers: { Authorization: `Bearer ${tutorToken}` }
    });
    
    console.log('üìö Danh s√°ch teaching slots c·ªßa tutor:');
    console.log(JSON.stringify(tutorSlots.data, null, 2));

    // 10. Ki·ªÉm tra dashboard c·ªßa tutor
    console.log('10. Ki·ªÉm tra dashboard c·ªßa tutor...');
    const tutorDashboard = await axios.get(`${API_URL}/dashboard/tutor`, {
      headers: { Authorization: `Bearer ${tutorToken}` }
    });
    
    console.log('üìä Dashboard c·ªßa tutor:');
    console.log(JSON.stringify(tutorDashboard.data, null, 2));

    console.log('\nüéâ Test ho√†n th√†nh! Tutor c√≥ th·ªÉ th·∫•y booking v√† teaching slots.');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.response?.data || error.message);
  }
}

// Ch·∫°y test
testBookingFlow();
